searchNodes=[{"ref":"GitGud.DB.html","title":"GitGud.DB","type":"module","doc":"Single source of data, mediates between domain and data mapping layer."},{"ref":"GitGud.DB.html#aggregate/4","title":"GitGud.DB.aggregate/4","type":"function","doc":"Calculate the given aggregate over the given field. If the query has a limit, offset or distinct set, it will be automatically wrapped in a subquery in order to return the proper result. Any preload or select in the query will be ignored in favor of the column being aggregated. The aggregation will fail if any group_by field is set. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Examples # Returns the number of visits per blog post Repo.aggregate(Post, :count, :visits) # Returns the number of visits per blog post in the &quot;private&quot; schema path # (in Postgres) or database (in MySQL) Repo.aggregate(Post, :count, :visits, prefix: &quot;private&quot;) # Returns the average number of visits for the top 10 query = from Post, limit: 10 Repo.aggregate(query, :avg, :visits) Callback implementation for Ecto.Repo.aggregate/4."},{"ref":"GitGud.DB.html#all/2","title":"GitGud.DB.all/2","type":"function","doc":"Fetches all entries from the data store matching the given query. May raise Ecto.QueryError if query validation fails. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Example # Fetch all post titles query = from p in Post, select: p.title MyRepo.all(query) Callback implementation for Ecto.Repo.all/2."},{"ref":"GitGud.DB.html#checkout/2","title":"GitGud.DB.checkout/2","type":"function","doc":"Checks out a connection for the duration of the function. It returns the result of the function. This is useful when you need to perform multiple operations against the repository in a row and you want to avoid checking out the connection multiple times. checkout/2 and transaction/2 can be combined and nested multiple times. If checkout/2 is called inside the function of another checkout/2 call, the function is simply executed, without checking out a new connection. Options See the &quot;Shared options&quot; section at the module documentation for more options. Callback implementation for Ecto.Repo.checkout/2."},{"ref":"GitGud.DB.html#child_spec/1","title":"GitGud.DB.child_spec/1","type":"function","doc":""},{"ref":"GitGud.DB.html#config/0","title":"GitGud.DB.config/0","type":"function","doc":"Returns the adapter configuration stored in the :otp_app environment. If the c:init/2 callback is implemented in the repository, it will be invoked with the first argument set to :runtime. Callback implementation for Ecto.Repo.config/0."},{"ref":"GitGud.DB.html#delete/2","title":"GitGud.DB.delete/2","type":"function","doc":"Deletes a struct using its primary key. If the struct has no primary key, Ecto.NoPrimaryKeyFieldError will be raised. If the struct has been removed from db prior to call, Ecto.StaleEntryError will be raised. It returns {:ok, struct} if the struct has been successfully deleted or {:error, changeset} if there was a validation or a known constraint error. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query and any @schema_prefix set in the schema. :stale_error_field - The field where stale errors will be added in the returning changeset. This option can be used to avoid raising Ecto.StaleEntryError. :stale_error_message - The message to add to the configured :stale_error_field when stale errors happen, defaults to &quot;is stale&quot;. See the &quot;Shared options&quot; section at the module documentation for more options. Example post = MyRepo.get!(Post, 42) case MyRepo.delete post do {:ok, struct} -&gt; # Deleted with success {:error, changeset} -&gt; # Something went wrong end Callback implementation for Ecto.Repo.delete/2."},{"ref":"GitGud.DB.html#delete!/2","title":"GitGud.DB.delete!/2","type":"function","doc":"Same as c:delete/2 but returns the struct or raises if the changeset is invalid. Callback implementation for Ecto.Repo.delete!/2."},{"ref":"GitGud.DB.html#delete_all/2","title":"GitGud.DB.delete_all/2","type":"function","doc":"Deletes all entries matching the given query. It returns a tuple containing the number of entries and any returned result as second element. The second element is nil by default unless a select is supplied in the update query. Note, however, not all databases support returning data from DELETEs. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query and any @schema_prefix set in the schema. See the &quot;Shared options&quot; section at the module documentation for remaining options. Examples MyRepo.delete_all(Post) from(p in Post, where: p.id &lt; 10) |&gt; MyRepo.delete_all Callback implementation for Ecto.Repo.delete_all/2."},{"ref":"GitGud.DB.html#exists?/2","title":"GitGud.DB.exists?/2","type":"function","doc":"Checks if there exists an entry that matches the given query. Returns a boolean. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Examples # checks if any posts exist Repo.exists?(Post) # checks if any posts exist in the &quot;private&quot; schema path (in Postgres) or # database (in MySQL) Repo.exists?(Post, schema: &quot;private&quot;) # checks if any post with a like count greater than 10 exists query = from p in Post, where: p.like_count &gt; 10 Repo.exists?(query) Callback implementation for Ecto.Repo.exists?/2."},{"ref":"GitGud.DB.html#get/3","title":"GitGud.DB.get/3","type":"function","doc":"Fetches a single struct from the data store where the primary key matches the given id. Returns nil if no result was found. If the struct in the queryable has no or more than one primary key, it will raise an argument error. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Example MyRepo.get(Post, 42) MyRepo.get(Post, 42, prefix: &quot;public&quot;) Callback implementation for Ecto.Repo.get/3."},{"ref":"GitGud.DB.html#get!/3","title":"GitGud.DB.get!/3","type":"function","doc":"Similar to c:get/3 but raises Ecto.NoResultsError if no record was found. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Example MyRepo.get!(Post, 42) MyRepo.get!(Post, 42, prefix: &quot;public&quot;) Callback implementation for Ecto.Repo.get!/3."},{"ref":"GitGud.DB.html#get_by/3","title":"GitGud.DB.get_by/3","type":"function","doc":"Fetches a single result from the query. Returns nil if no result was found. Raises if more than one entry. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Example MyRepo.get_by(Post, title: &quot;My post&quot;) MyRepo.get_by(Post, [title: &quot;My post&quot;], prefix: &quot;public&quot;) Callback implementation for Ecto.Repo.get_by/3."},{"ref":"GitGud.DB.html#get_by!/3","title":"GitGud.DB.get_by!/3","type":"function","doc":"Similar to c:get_by/3 but raises Ecto.NoResultsError if no record was found. Raises if more than one entry. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Example MyRepo.get_by!(Post, title: &quot;My post&quot;) MyRepo.get_by!(Post, [title: &quot;My post&quot;], prefix: &quot;public&quot;) Callback implementation for Ecto.Repo.get_by!/3."},{"ref":"GitGud.DB.html#get_dynamic_repo/0","title":"GitGud.DB.get_dynamic_repo/0","type":"function","doc":"Returns the atom name or pid of the current repository. See c:put_dynamic_repo/1 for more information. Callback implementation for Ecto.Repo.get_dynamic_repo/0."},{"ref":"GitGud.DB.html#in_transaction?/0","title":"GitGud.DB.in_transaction?/0","type":"function","doc":"Returns true if the current process is inside a transaction. If you are using the Ecto.Adapters.SQL.Sandbox in tests, note that even though each test is inside a transaction, in_transaction?/0 will only return true inside transactions explicitly created with transaction/2. This is done so the test environment mimics dev and prod. If you are trying to debug transaction-related code while using Ecto.Adapters.SQL.Sandbox, it may be more helpful to configure the database to log all statements and consult those logs. Examples MyRepo.in_transaction? #=&gt; false MyRepo.transaction(fn -&gt; MyRepo.in_transaction? #=&gt; true end) Callback implementation for Ecto.Repo.in_transaction?/0."},{"ref":"GitGud.DB.html#init/2","title":"GitGud.DB.init/2","type":"function","doc":"Dynamically loads the repository url from the DATABASE_URL environment variable."},{"ref":"GitGud.DB.html#insert/2","title":"GitGud.DB.insert/2","type":"function","doc":"Inserts a struct defined via Ecto.Schema or a changeset. In case a struct is given, the struct is converted into a changeset with all non-nil fields as part of the changeset. In case a changeset is given, the changes in the changeset are merged with the struct fields, and all of them are sent to the database. It returns {:ok, struct} if the struct has been successfully inserted or {:error, changeset} if there was a validation or a known constraint error. Options :returning - selects which fields to return. It accepts a list of fields to be returned from the database. When true, returns all fields. When false, no extra fields are returned. It will always include all fields in read_after_writes as well as any autogenerated id. Not all databases support this option. :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query and any @schema_prefix set any schemas. Also, the @schema_prefix for the parent record will override all default @schema_prefixs set in any child schemas for associations. :on_conflict - It may be one of :raise (the default), :nothing, :replace_all, :replace_all_except_primary_key, {:replace, fields}, a keyword list of update instructions or an Ecto.Query query for updates. See the &quot;Upserts&quot; section for more information. :conflict_target - A list of column names to verify for conflicts. It is expected those columns to have unique indexes on them that may conflict. If none is specified, the conflict target is left up to the database. May also be {:constraint, constraint_name_as_atom} in databases that support the &quot;ON CONSTRAINT&quot; expression, such as PostgreSQL. :stale_error_field - The field where stale errors will be added in the returning changeset. This option can be used to avoid raising Ecto.StaleEntryError. :stale_error_message - The message to add to the configured :stale_error_field when stale errors happen, defaults to &quot;is stale&quot;. See the &quot;Shared options&quot; section at the module documentation for more options. Examples A typical example is calling MyRepo.insert/1 with a struct and acting on the return value: case MyRepo.insert %Post{title: &quot;Ecto is great&quot;} do {:ok, struct} -&gt; # Inserted with success {:error, changeset} -&gt; # Something went wrong end Upserts c:insert/2 provides upserts (update or inserts) via the :on_conflict option. The :on_conflict option supports the following values: :raise - raises if there is a conflicting primary key or unique index :nothing - ignores the error in case of conflicts :replace_all - replace all values on the existing row with the values in the schema/changeset, including autogenerated fields such as inserted_at and updated_at :replace_all_except_primary_key - same as above except primary keys are not replaced {:replace, fields} - replace only specific columns. This option requires conflict_target a keyword list of update instructions - such as the one given to c:update_all/3, for example: [set: [title: &quot;new title&quot;]] an Ecto.Query that will act as an UPDATE statement, such as the one given to c:update_all/3. If the struct cannot be found, Ecto.StaleEntryError will be raised. Upserts map to &quot;ON CONFLICT&quot; on databases like Postgres and &quot;ON DUPLICATE KEY&quot; on databases such as MySQL. As an example, imagine :title is marked as a unique column in the database: {:ok, inserted} = MyRepo.insert(%Post{title: &quot;this is unique&quot;}) Now we can insert with the same title but do nothing on conflicts: {:ok, ignored} = MyRepo.insert(%Post{title: &quot;this is unique&quot;}, on_conflict: :nothing) assert ignored.id == nil Because we used on_conflict: :nothing, instead of getting an error, we got {:ok, struct}. However the returned struct does not reflect the data in the database. One possible mechanism to detect if an insert or nothing happened in case of on_conflict: :nothing is by checking the id field. id will be nil if the field is autogenerated by the database and no insert happened. For actual upserts, where an insert or update may happen, the situation is slightly more complex, as the database does not actually inform us if an insert or update happened. Let&#39;s insert a post with the same title but use a query to update the body column in case of conflicts: # In Postgres (it requires the conflict target for updates): on_conflict = [set: [body: &quot;updated&quot;]] {:ok, updated} = MyRepo.insert(%Post{title: &quot;this is unique&quot;}, on_conflict: on_conflict, conflict_target: :title) # In MySQL (conflict target is not supported): on_conflict = [set: [title: &quot;updated&quot;]] {:ok, updated} = MyRepo.insert(%Post{id: inserted.id, title: &quot;updated&quot;}, on_conflict: on_conflict) In the examples above, even though it returned :ok, we do not know if we inserted new data or if we updated only the :on_conflict fields. In case an update happened, the data in the struct most likely does not match the data in the database. For example, autogenerated fields such as inserted_at will point to now rather than the time the struct was actually inserted. If you need to guarantee the data in the returned struct mirrors the database, you have three options: Use on_conflict: :replace_all, although that will replace all fields in the database with the ones in the struct/changeset, including autogenerated fields such as insert_at and updated_at: MyRepo.insert(%Post{title: &quot;this is unique&quot;}, on_conflict: :replace_all, conflict_target: :title) Specify read_after_writes: true in your schema for choosing fields that are read from the database after every operation. Or pass returning: true to insert to read all fields back: MyRepo.insert(%Post{title: &quot;this is unique&quot;}, returning: true, on_conflict: on_conflict, conflict_target: :title) Alternatively, read the data again from the database in a separate query. This option requires the primary key to be generated by the database: {:ok, updated} = MyRepo.insert(%Post{title: &quot;this is unique&quot;}, on_conflict: on_conflict) Repo.get(Post, updated.id) Because of the inability to know if the struct is up to date or not, inserting a struct with associations and using the :on_conflict option at the same time is not recommended, as Ecto will be unable to actually track the proper status of the association. Callback implementation for Ecto.Repo.insert/2."},{"ref":"GitGud.DB.html#insert!/2","title":"GitGud.DB.insert!/2","type":"function","doc":"Same as c:insert/2 but returns the struct or raises if the changeset is invalid. Callback implementation for Ecto.Repo.insert!/2."},{"ref":"GitGud.DB.html#insert_all/3","title":"GitGud.DB.insert_all/3","type":"function","doc":"Inserts all entries into the repository. It expects a schema module (MyApp.User) or a source (&quot;users&quot;) or both ({&quot;users&quot;, MyApp.User}) as the first argument. The second argument is a list of entries to be inserted, either as keyword lists or as maps. The keys of the entries are the field names as atoms and the value should be the respective value for the field type or, optionally, an Ecto.Query that returns a single entry with a single value. It returns a tuple containing the number of entries and any returned result as second element. If the database does not support RETURNING in INSERT statements or no return result was selected, the second element will be nil. When a schema module is given, the entries given will be properly dumped before being sent to the database. If the schema contains an autogenerated ID field, it will be handled either at the adapter or the storage layer. However any other autogenerated value, like timestamps, won&#39;t be autogenerated when using c:insert_all/3. This is by design as this function aims to be a more direct way to insert data into the database without the conveniences of c:insert/2. This is also consistent with c:update_all/3 that does not handle timestamps as well. It is also not possible to use insert_all to insert across multiple tables, therefore associations are not supported. If a source is given, without a schema module, the given fields are passed as is to the adapter. Options :returning - selects which fields to return. When true, returns all fields in the given schema. May be a list of fields, where a struct is still returned but only with the given fields. Or false, where nothing is returned (the default). This option is not supported by all databases. :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query and any @schema_prefix set in the schema. :on_conflict - It may be one of :raise (the default), :nothing, :replace_all, :replace_all_except_primary_key, {:replace, fields}, a keyword list of update instructions or an Ecto.Query query for updates. See the &quot;Upserts&quot; section for more information. :conflict_target - A list of column names to verify for conflicts. It is expected those columns to have unique indexes on them that may conflict. If none is specified, the conflict target is left up to the database. It may also be {:constraint, constraint_name_as_atom} in databases that support the &quot;ON CONSTRAINT&quot; expression, such as PostgreSQL, or {:unsafe_fragment, binary_fragment} to pass any expression to the database without any sanitization, such as ON CONFLICT (coalesce(firstname, &quot;&quot;), coalesce(lastname, &quot;&quot;)). See the &quot;Shared options&quot; section at the module documentation for remaining options. Examples MyRepo.insert_all(Post, [[title: &quot;My first post&quot;], [title: &quot;My second post&quot;]]) MyRepo.insert_all(Post, [%{title: &quot;My first post&quot;}, %{title: &quot;My second post&quot;}]) Upserts c:insert_all/3 provides upserts (update or inserts) via the :on_conflict option. The :on_conflict option supports the following values: :raise - raises if there is a conflicting primary key or unique index :nothing - ignores the error in case of conflicts :replace_all - replace all values on the existing row by the new entry, including values not sent explicitly by Ecto, such as database defaults. This option requires a schema :replace_all_except_primary_key - same as above except primary keys are not replaced. This option requires a schema {:replace, fields} - replace only specific columns. This option requires conflict_target a keyword list of update instructions - such as the one given to c:update_all/3, for example: [set: [title: &quot;new title&quot;]] an Ecto.Query that will act as an UPDATE statement, such as the one given to c:update_all/3 Upserts map to &quot;ON CONFLICT&quot; on databases like Postgres and &quot;ON DUPLICATE KEY&quot; on databases such as MySQL. Return values By default, both Postgres and MySQL return the amount of entries inserted on c:insert_all/3. However, when the :on_conflict option is specified, Postgres will only return a row if it was affected while MySQL returns at least the number of entries attempted. For example, if :on_conflict is set to :nothing, Postgres will return 0 if no new entry was added while MySQL will still return the amount of entries attempted to be inserted, even if no entry was added. Even worse, if :on_conflict is query, MySQL will return the number of attempted entries plus the number of entries modified by the UPDATE query. Callback implementation for Ecto.Repo.insert_all/3."},{"ref":"GitGud.DB.html#insert_or_update/2","title":"GitGud.DB.insert_or_update/2","type":"function","doc":"Inserts or updates a changeset depending on whether the struct is persisted or not. The distinction whether to insert or update will be made on the Ecto.Schema.Metadata field :state. The :state is automatically set by Ecto when loading or building a schema. Please note that for this to work, you will have to load existing structs from the database. So even if the struct exists, this won&#39;t work: struct = %Post{id: &quot;existing_id&quot;, ...} MyRepo.insert_or_update changeset # =&gt; {:error, changeset} # id already exists Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query and any @schema_prefix set any schemas. Also, the @schema_prefix for the parent record will override all default @schema_prefixs set in any child schemas for associations. :stale_error_field - The field where stale errors will be added in the returning changeset. This option can be used to avoid raising Ecto.StaleEntryError. Only applies to updates. :stale_error_message - The message to add to the configured :stale_error_field when stale errors happen, defaults to &quot;is stale&quot;. Only applies to updates. See the &quot;Shared options&quot; section at the module documentation for more options. Example result = case MyRepo.get(Post, id) do nil -&gt; %Post{id: id} # Post not found, we build one post -&gt; post # Post exists, let&#39;s use it end |&gt; Post.changeset(changes) |&gt; MyRepo.insert_or_update case result do {:ok, struct} -&gt; # Inserted or updated with success {:error, changeset} -&gt; # Something went wrong end Callback implementation for Ecto.Repo.insert_or_update/2."},{"ref":"GitGud.DB.html#insert_or_update!/2","title":"GitGud.DB.insert_or_update!/2","type":"function","doc":"Same as c:insert_or_update/2 but returns the struct or raises if the changeset is invalid. Callback implementation for Ecto.Repo.insert_or_update!/2."},{"ref":"GitGud.DB.html#load/2","title":"GitGud.DB.load/2","type":"function","doc":"Loads data into a struct or a map. The first argument can be a a schema module, or a map (of types) and determines the return value: a struct or a map, respectively. The second argument data specifies fields and values that are to be loaded. It can be a map, a keyword list, or a {fields, values} tuple. Fields can be atoms or strings. Fields that are not present in the schema (or types map) are ignored. If any of the values has invalid type, an error is raised. Examples iex&gt; MyRepo.load(User, %{name: &quot;Alice&quot;, age: 25}) %User{name: &quot;Alice&quot;, age: 25} iex&gt; MyRepo.load(User, [name: &quot;Alice&quot;, age: 25]) %User{name: &quot;Alice&quot;, age: 25} data can also take form of {fields, values}: iex&gt; MyRepo.load(User, {[:name, :age], [&quot;Alice&quot;, 25]}) %User{name: &quot;Alice&quot;, age: 25, ...} The first argument can also be a types map: iex&gt; types = %{name: :string, age: :integer} iex&gt; MyRepo.load(types, %{name: &quot;Alice&quot;, age: 25}) %{name: &quot;Alice&quot;, age: 25} This function is especially useful when parsing raw query results: iex&gt; result = Ecto.Adapters.SQL.query!(MyRepo, &quot;SELECT * FROM users&quot;, []) iex&gt; Enum.map(result.rows, &amp;MyRepo.load(User, {result.columns, &amp;1})) [%User{...}, ...] Callback implementation for Ecto.Repo.load/2."},{"ref":"GitGud.DB.html#one/2","title":"GitGud.DB.one/2","type":"function","doc":"Fetches a single result from the query. Returns nil if no result was found. Raises if more than one entry. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Examples Repo.one(Post) Repo.one(from p in Post, where: p.like_count &gt; 10) query = from p in Post, where: p.like_count &gt; 10 Repo.one(query, prefix: &quot;private&quot;) Callback implementation for Ecto.Repo.one/2."},{"ref":"GitGud.DB.html#one!/2","title":"GitGud.DB.one!/2","type":"function","doc":"Similar to c:one/2 but raises Ecto.NoResultsError if no record was found. Raises if more than one entry. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. See the &quot;Shared options&quot; section at the module documentation for more options. Callback implementation for Ecto.Repo.one!/2."},{"ref":"GitGud.DB.html#preload/3","title":"GitGud.DB.preload/3","type":"function","doc":"Preloads all associations on the given struct or structs. This is similar to Ecto.Query.preload/3 except it allows you to preload structs after they have been fetched from the database. In case the association was already loaded, preload won&#39;t attempt to reload it. Options :force - By default, Ecto won&#39;t preload associations that are already loaded. By setting this option to true, any existing association will be discarded and reloaded. :in_parallel - If the preloads must be done in parallel. It can only be performed when we have more than one preload and the repository is not in a transaction. Defaults to true. :prefix - the prefix to fetch preloads from. By default, queries will use the same prefix as the one in the given collection. This option allows the prefix to be changed. See the &quot;Shared options&quot; section at the module documentation for more options. Examples # Use a single atom to preload an association posts = Repo.preload posts, :comments # Use a list of atoms to preload multiple associations posts = Repo.preload posts, [:comments, :authors] # Use a keyword list to preload nested associations as well posts = Repo.preload posts, [comments: [:replies, :likes], authors: []] # Use a keyword list to customize how associations are queried posts = Repo.preload posts, [comments: from(c in Comment, order_by: c.published_at)] # Use a two-element tuple for a custom query and nested association definition query = from c in Comment, order_by: c.published_at posts = Repo.preload posts, [comments: {query, [:replies, :likes]}] The query given to preload may also preload its own associations. Callback implementation for Ecto.Repo.preload/3."},{"ref":"GitGud.DB.html#prepare_query/3","title":"GitGud.DB.prepare_query/3","type":"function","doc":"A user customizable callback invoked for query-based operations. This callback can be used to further modify the query and options before it is transformed and sent to the database. This callback is invoked for all query APIs, including the stream function, but it is not invoked for insert_all nor any of the schema functions. Callback implementation for Ecto.Repo.prepare_query/3."},{"ref":"GitGud.DB.html#put_dynamic_repo/1","title":"GitGud.DB.put_dynamic_repo/1","type":"function","doc":"Sets the dynamic repository to be used in further interactions. Sometimes you may want a single Ecto repository to talk to many different database instances. By default, when you call MyApp.Repo.start_link/1, it will start a repository with name MyApp.Repo. But if you want to start multiple repositories, you can give each of them a different name: MyApp.Repo.start_link(name: :tenant_foo, hostname: &quot;foo.example.com&quot;) MyApp.Repo.start_link(name: :tenant_bar, hostname: &quot;bar.example.com&quot;) You can also start repositories without names by explicitly setting the name to nil: MyApp.Repo.start_link(name: nil, hostname: &quot;temp.example.com&quot;) However, once the repository is started, you can&#39;t directly interact with it, since all operations in MyApp.Repo are sent by default to the repository named MyApp.Repo. You can change the default repo at compile time with: use Ecto.Repo, default_dynamic_repo: :name_of_repo Or you can change it anytime at runtime by calling put_dynamic_repo/1: MyApp.Repo.put_dynamic_repo(:tenant_foo) From this moment on, all future queries done by the current process will run on :tenant_foo. Note this feature is experimental and may be changed or removed in future releases. Callback implementation for Ecto.Repo.put_dynamic_repo/1."},{"ref":"GitGud.DB.html#query/3","title":"GitGud.DB.query/3","type":"function","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query/4 for more information."},{"ref":"GitGud.DB.html#query!/3","title":"GitGud.DB.query!/3","type":"function","doc":"A convenience function for SQL-based repositories that executes the given query. See Ecto.Adapters.SQL.query!/4 for more information."},{"ref":"GitGud.DB.html#rollback/1","title":"GitGud.DB.rollback/1","type":"function","doc":"Rolls back the current transaction. The transaction will return the value given as {:error, value}. Callback implementation for Ecto.Repo.rollback/1."},{"ref":"GitGud.DB.html#start_link/1","title":"GitGud.DB.start_link/1","type":"function","doc":"Starts any connection pooling or supervision and return {:ok, pid} or just :ok if nothing needs to be done. Returns {:error, {:already_started, pid}} if the repo is already started or {:error, term} in case anything else goes wrong. Options See the configuration in the moduledoc for options shared between adapters, for adapter-specific configuration see the adapter&#39;s documentation. Callback implementation for Ecto.Repo.start_link/1."},{"ref":"GitGud.DB.html#stop/1","title":"GitGud.DB.stop/1","type":"function","doc":"Shuts down the repository. Callback implementation for Ecto.Repo.stop/1."},{"ref":"GitGud.DB.html#stream/2","title":"GitGud.DB.stream/2","type":"function","doc":"Returns a lazy enumerable that emits all entries from the data store matching the given query. SQL adapters, such as Postgres and MySQL, can only enumerate a stream inside a transaction. May raise Ecto.QueryError if query validation fails. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This will be applied to all from and joins in the query that did not have a prefix previously given either via the :prefix option on join/from or via @schema_prefix in the schema. For more information see the &quot;Query Prefix&quot; section of the Ecto.Query documentation. :max_rows - The number of rows to load from the database as we stream. It is supported at least by Postgres and MySQL and defaults to 500. See the &quot;Shared options&quot; section at the module documentation for more options. Example # Fetch all post titles query = from p in Post, select: p.title stream = MyRepo.stream(query) MyRepo.transaction(fn() -&gt; Enum.to_list(stream) end) Callback implementation for Ecto.Repo.stream/2."},{"ref":"GitGud.DB.html#to_sql/2","title":"GitGud.DB.to_sql/2","type":"function","doc":"A convenience function for SQL-based repositories that translates the given query to SQL. See Ecto.Adapters.SQL.to_sql/3 for more information."},{"ref":"GitGud.DB.html#transaction/2","title":"GitGud.DB.transaction/2","type":"function","doc":"Runs the given function or Ecto.Multi inside a transaction. Use with function c:transaction/2 can be called with both a function of arity zero or one. The arity zero function will just be executed as is, while the arity one function will receive the repo of the transaction as its first argument, similar to Ecto.Multi.run. If an unhandled error occurs the transaction will be rolled back and the error will bubble up from the transaction function. If no error occurred the transaction will be committed when the function returns. A transaction can be explicitly rolled back by calling c:rollback/1, this will immediately leave the function and return the value given to rollback as {:error, value}. A successful transaction returns the value returned by the function wrapped in a tuple as {:ok, value}. If c:transaction/2 is called inside another transaction, the function is simply executed, without wrapping the new transaction call in any way. If there is an error in the inner transaction and the error is rescued, or the inner transaction is rolled back, the whole outer transaction is marked as tainted, guaranteeing nothing will be committed. Use with Ecto.Multi Besides functions transaction can be used with an Ecto.Multi struct. Transaction will be started, all operations applied and in case of success committed returning {:ok, changes}. In case of any errors the transaction will be rolled back and {:error, failed_operation, failed_value, changes_so_far} will be returned. You can read more about using transactions with Ecto.Multi as well as see some examples in the Ecto.Multi documentation. Options See the &quot;Shared options&quot; section at the module documentation for more options. Examples import Ecto.Changeset, only: [change: 2] MyRepo.transaction(fn -&gt; MyRepo.update!(change(alice, balance: alice.balance - 10)) MyRepo.update!(change(bob, balance: bob.balance + 10)) end) # When passing a function of arity 1, it receives the repository itself MyRepo.transaction(fn repo -&gt; repo.insert!(%Post{}) end) # Roll back a transaction explicitly MyRepo.transaction(fn -&gt; p = MyRepo.insert!(%Post{}) if not Editor.post_allowed?(p) do MyRepo.rollback(:posting_not_allowed) end end) # With Ecto.Multi Ecto.Multi.new |&gt; Ecto.Multi.insert(:post, %Post{}) |&gt; MyRepo.transaction Callback implementation for Ecto.Repo.transaction/2."},{"ref":"GitGud.DB.html#update/2","title":"GitGud.DB.update/2","type":"function","doc":"Updates a changeset using its primary key. A changeset is required as it is the only mechanism for tracking dirty changes. Only the fields present in the changes part of the changeset are sent to the database. Any other, in-memory changes done to the schema are ignored. If the struct has no primary key, Ecto.NoPrimaryKeyFieldError will be raised. If the struct cannot be found, Ecto.StaleEntryError will be raised. It returns {:ok, struct} if the struct has been successfully updated or {:error, changeset} if there was a validation or a known constraint error. Options :returning - selects which fields to return. It accepts a list of fields to be returned from the database. When true, returns all fields. When false, no extra fields are returned. It will always include all fields in read_after_writes. Not all databases support this option. :force - By default, if there are no changes in the changeset, c:update/2 is a no-op. By setting this option to true, update callbacks will always be executed, even if there are no changes (including timestamps). :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query and any @schema_prefix set any schemas. Also, the @schema_prefix for the parent record will override all default @schema_prefixs set in any child schemas for associations. :stale_error_field - The field where stale errors will be added in the returning changeset. This option can be used to avoid raising Ecto.StaleEntryError. :stale_error_message - The message to add to the configured :stale_error_field when stale errors happen, defaults to &quot;is stale&quot;. See the &quot;Shared options&quot; section at the module documentation for more options. Example post = MyRepo.get!(Post, 42) post = Ecto.Changeset.change post, title: &quot;New title&quot; case MyRepo.update post do {:ok, struct} -&gt; # Updated with success {:error, changeset} -&gt; # Something went wrong end Callback implementation for Ecto.Repo.update/2."},{"ref":"GitGud.DB.html#update!/2","title":"GitGud.DB.update!/2","type":"function","doc":"Same as c:update/2 but returns the struct or raises if the changeset is invalid. Callback implementation for Ecto.Repo.update!/2."},{"ref":"GitGud.DB.html#update_all/3","title":"GitGud.DB.update_all/3","type":"function","doc":"Updates all entries matching the given query with the given values. It returns a tuple containing the number of entries and any returned result as second element. The second element is nil by default unless a select is supplied in the update query. Note, however, not all databases support returning data from UPDATEs. Keep in mind this update_all will not update autogenerated fields like the updated_at columns. See Ecto.Query.update/3 for update operations that can be performed on fields. Options :prefix - The prefix to run the query on (such as the schema path in Postgres or the database in MySQL). This overrides the prefix set in the query and any @schema_prefix set in the schema. See the &quot;Shared options&quot; section at the module documentation for remaining options. Examples MyRepo.update_all(Post, set: [title: &quot;New title&quot;]) MyRepo.update_all(Post, inc: [visits: 1]) from(p in Post, where: p.id &lt; 10, select: p.visits) |&gt; MyRepo.update_all(set: [title: &quot;New title&quot;]) from(p in Post, where: p.id &lt; 10, update: [set: [title: &quot;New title&quot;]]) |&gt; MyRepo.update_all([]) from(p in Post, where: p.id &lt; 10, update: [set: [title: ^new_title]]) |&gt; MyRepo.update_all([]) from(p in Post, where: p.id &lt; 10, update: [set: [title: fragment(&quot;upper(?)&quot;, ^new_title)]]) |&gt; MyRepo.update_all([]) Callback implementation for Ecto.Repo.update_all/3."},{"ref":"GitGud.DBQueryable.html","title":"GitGud.DBQueryable","type":"behaviour","doc":"Behaviour for implementing generic queries."},{"ref":"GitGud.DBQueryable.html#c:alter_query/3","title":"GitGud.DBQueryable.alter_query/3","type":"callback","doc":""},{"ref":"GitGud.DBQueryable.html#query/3","title":"GitGud.DBQueryable.query/3","type":"function","doc":"Returns a query for the given queryable."},{"ref":"GitGud.Authorization.html","title":"GitGud.Authorization","type":"module","doc":"Conveniences for authorization and resource loading."},{"ref":"GitGud.Authorization.html#authorized?/3","title":"GitGud.Authorization.authorized?/3","type":"function","doc":"Returns true if user is allowed to perform action on resource; otherwhise returns false."},{"ref":"GitGud.Authorization.html#enforce_policy/3","title":"GitGud.Authorization.enforce_policy/3","type":"function","doc":"Enforces the authorization policy."},{"ref":"GitGud.Authorization.html#enforce_policy!/4","title":"GitGud.Authorization.enforce_policy!/4","type":"function","doc":"Same as enforce_policy/3 but returns the resource or default if the policy cannot be enforced."},{"ref":"GitGud.Authorization.html#filter/3","title":"GitGud.Authorization.filter/3","type":"function","doc":"Filters the given list of resources, i.e. returns only those for which enforce_policy/3 applies."},{"ref":"GitGud.AuthorizationPolicies.html","title":"GitGud.AuthorizationPolicies","type":"protocol","doc":"Protocol for implementing resource authorization policies."},{"ref":"GitGud.AuthorizationPolicies.html#can?/3","title":"GitGud.AuthorizationPolicies.can?/3","type":"function","doc":"Returns true if user is allowed to perform action on resource; otherwhise returns false."},{"ref":"GitGud.AuthorizationPolicies.html#t:t/0","title":"GitGud.AuthorizationPolicies.t/0","type":"type","doc":""},{"ref":"GitGud.Auth.html","title":"GitGud.Auth","type":"module","doc":"Authentication schema and helper functions."},{"ref":"GitGud.Auth.html#check_credentials/2","title":"GitGud.Auth.check_credentials/2","type":"function","doc":"Returns the matching user for the given credentials; elsewhise returns nil. if user = GitGud.Auth.check_credentials(&quot;redrabbit&quot;, &quot;qwertz&quot;) do IO.puts &quot;Welcome!&quot; else IO.puts &quot;Invalid login credentials.&quot; end"},{"ref":"GitGud.Auth.html#oauth2_changeset/2","title":"GitGud.Auth.oauth2_changeset/2","type":"function","doc":"Returns an OAuth2.0 changeset for the given params."},{"ref":"GitGud.Auth.html#password_changeset/2","title":"GitGud.Auth.password_changeset/2","type":"function","doc":"Returns a password changeset for the given params."},{"ref":"GitGud.Auth.html#registration_changeset/2","title":"GitGud.Auth.registration_changeset/2","type":"function","doc":"Returns a registration changeset for the given params."},{"ref":"GitGud.Auth.html#t:t/0","title":"GitGud.Auth.t/0","type":"type","doc":""},{"ref":"GitGud.Comment.html","title":"GitGud.Comment","type":"module","doc":"Comment schema and helper functions."},{"ref":"GitGud.Comment.html#changeset/2","title":"GitGud.Comment.changeset/2","type":"function","doc":"Returns a comment changeset for the given params."},{"ref":"GitGud.Comment.html#delete/1","title":"GitGud.Comment.delete/1","type":"function","doc":"Deletes the given comment."},{"ref":"GitGud.Comment.html#delete!/1","title":"GitGud.Comment.delete!/1","type":"function","doc":"Similar to delete!/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Comment.html#update/2","title":"GitGud.Comment.update/2","type":"function","doc":"Updates the given repo with the given params. {:ok, comment} = GitGud.Comment.update(comment, body: &quot;This is the **new** comment message.&quot;) This function validates the given params using changeset/2."},{"ref":"GitGud.Comment.html#update!/2","title":"GitGud.Comment.update!/2","type":"function","doc":"Similar to update/2, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Comment.html#t:t/0","title":"GitGud.Comment.t/0","type":"type","doc":""},{"ref":"GitGud.CommentQuery.html","title":"GitGud.CommentQuery","type":"module","doc":"Conveniences for comment related queries."},{"ref":"GitGud.CommentQuery.html#by_id/2","title":"GitGud.CommentQuery.by_id/2","type":"function","doc":"Returns a comment for the given id."},{"ref":"GitGud.CommentQuery.html#comment_query/1","title":"GitGud.CommentQuery.comment_query/1","type":"function","doc":"Returns a query for fetching a single comment by id."},{"ref":"GitGud.CommentQuery.html#thread/2","title":"GitGud.CommentQuery.thread/2","type":"function","doc":"Returns the thread associated to the given comment."},{"ref":"GitGud.CommentQuery.html#thread_query/2","title":"GitGud.CommentQuery.thread_query/2","type":"function","doc":"Returns a query for fetching the associated thread for the given comment id and table."},{"ref":"GitGud.Commit.html","title":"GitGud.Commit","type":"module","doc":"Git commit schema and helper functions."},{"ref":"GitGud.Commit.html#decode!/1","title":"GitGud.Commit.decode!/1","type":"function","doc":"Decodes the given Git commit data."},{"ref":"GitGud.Commit.html#t:t/0","title":"GitGud.Commit.t/0","type":"type","doc":""},{"ref":"GitGud.CommitLineReview.html","title":"GitGud.CommitLineReview","type":"module","doc":"Git commit review schema and helper functions."},{"ref":"GitGud.CommitLineReview.html#add_comment/8","title":"GitGud.CommitLineReview.add_comment/8","type":"function","doc":"Adds a new comment."},{"ref":"GitGud.CommitLineReview.html#changeset/2","title":"GitGud.CommitLineReview.changeset/2","type":"function","doc":"Returns a commit line review changeset for the given params."},{"ref":"GitGud.CommitLineReview.html#t:t/0","title":"GitGud.CommitLineReview.t/0","type":"type","doc":""},{"ref":"GitGud.CommitQuery.html","title":"GitGud.CommitQuery","type":"module","doc":"Conveniences for commit related queries."},{"ref":"GitGud.CommitQuery.html#ancestors_count_query/2","title":"GitGud.CommitQuery.ancestors_count_query/2","type":"function","doc":"Returns a query for counting the number of ancestors for the given commit."},{"ref":"GitGud.CommitQuery.html#by_oid/3","title":"GitGud.CommitQuery.by_oid/3","type":"function","doc":"Returns a commit for the given oid."},{"ref":"GitGud.CommitQuery.html#commit_query/2","title":"GitGud.CommitQuery.commit_query/2","type":"function","doc":"Returns a query for fetching the commit with the given oid."},{"ref":"GitGud.CommitQuery.html#count_ancestors/3","title":"GitGud.CommitQuery.count_ancestors/3","type":"function","doc":"Returns the number of ancestors for the given repo and commit."},{"ref":"GitGud.CommitQuery.html#gpg_signature/3","title":"GitGud.CommitQuery.gpg_signature/3","type":"function","doc":"Returns the GPG key associated to given signed commit."},{"ref":"GitGud.CommitQuery.html#gpg_signature_query/2","title":"GitGud.CommitQuery.gpg_signature_query/2","type":"function","doc":"Returns a query for fetching the GPG key associated to the given signed commit."},{"ref":"GitGud.CommitQuery.html#history/3","title":"GitGud.CommitQuery.history/3","type":"function","doc":"Returns the commit history starting from the given commit."},{"ref":"GitGud.CommitQuery.html#history_query/2","title":"GitGud.CommitQuery.history_query/2","type":"function","doc":"Returns a query for fetching the commit history starting from the given commit."},{"ref":"GitGud.CommitReview.html","title":"GitGud.CommitReview","type":"module","doc":"Git commit review schema and helper functions."},{"ref":"GitGud.CommitReview.html#add_comment/5","title":"GitGud.CommitReview.add_comment/5","type":"function","doc":"Adds a new comment."},{"ref":"GitGud.CommitReview.html#changeset/2","title":"GitGud.CommitReview.changeset/2","type":"function","doc":"Returns a commit review changeset for the given params."},{"ref":"GitGud.CommitReview.html#t:t/0","title":"GitGud.CommitReview.t/0","type":"type","doc":""},{"ref":"GitGud.Email.html","title":"GitGud.Email","type":"module","doc":"Email schema and helper functions. An GitGud.Email is used for a many different tasks such as user authentication &amp; verification, email notifications, identification of Git commit authors, etc. Every GitGud.User has at least one email address. In order to be taken in account, an email address must be verified first. See verify/1 for more details. Once verified, an email address can be used to authenticate users (see GitGud.Auth.check_credentials/2) and resolve Git commit authors."},{"ref":"GitGud.Email.html#create/1","title":"GitGud.Email.create/1","type":"function","doc":"Creates a new email with the given params. {:ok, email} = GitGud.Email.create(user_id: user.id, address: &quot;m.flach@almightycouch.com&quot;) This function validates the given params using registration_changeset/2."},{"ref":"GitGud.Email.html#create!/1","title":"GitGud.Email.create!/1","type":"function","doc":"Similar to create/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Email.html#delete/1","title":"GitGud.Email.delete/1","type":"function","doc":"Deletes the given email."},{"ref":"GitGud.Email.html#delete!/1","title":"GitGud.Email.delete!/1","type":"function","doc":"Similar to delete!/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Email.html#registration_changeset/2","title":"GitGud.Email.registration_changeset/2","type":"function","doc":"Returns an email registration changeset for the given params."},{"ref":"GitGud.Email.html#verification_changeset/1","title":"GitGud.Email.verification_changeset/1","type":"function","doc":"Returns an email verification changeset for the given params."},{"ref":"GitGud.Email.html#verify/1","title":"GitGud.Email.verify/1","type":"function","doc":"Verifies the given email."},{"ref":"GitGud.Email.html#verify!/1","title":"GitGud.Email.verify!/1","type":"function","doc":"Similar to verify/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Email.html#t:t/0","title":"GitGud.Email.t/0","type":"type","doc":""},{"ref":"GitGud.GPGKey.html","title":"GitGud.GPGKey","type":"module","doc":"GNU Privacy Guard (GPG) key schema and helper functions."},{"ref":"GitGud.GPGKey.html#changeset/2","title":"GitGud.GPGKey.changeset/2","type":"function","doc":"Returns a GPG key changeset for the given params."},{"ref":"GitGud.GPGKey.html#create/1","title":"GitGud.GPGKey.create/1","type":"function","doc":"Creates a new SSH key with the given params. {:ok, gpg_key} = GitGud.GPGKey.create(user_id: user.id, data: &quot;...&quot;) This function validates the given params using changeset/2."},{"ref":"GitGud.GPGKey.html#create!/1","title":"GitGud.GPGKey.create!/1","type":"function","doc":"Similar to create/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.GPGKey.html#decode!/1","title":"GitGud.GPGKey.decode!/1","type":"function","doc":"Decodes the given ASCII armor message."},{"ref":"GitGud.GPGKey.html#delete/1","title":"GitGud.GPGKey.delete/1","type":"function","doc":"Deletes the given gpg_key."},{"ref":"GitGud.GPGKey.html#delete!/1","title":"GitGud.GPGKey.delete!/1","type":"function","doc":"Similar to delete!/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.GPGKey.html#parse!/1","title":"GitGud.GPGKey.parse!/1","type":"function","doc":"Parses the given GPG key data."},{"ref":"GitGud.GPGKey.html#t:t/0","title":"GitGud.GPGKey.t/0","type":"type","doc":""},{"ref":"GitGud.GPGKeyQuery.html","title":"GitGud.GPGKeyQuery","type":"module","doc":"Conveniences for GPG key related queries."},{"ref":"GitGud.GPGKeyQuery.html#by_id/2","title":"GitGud.GPGKeyQuery.by_id/2","type":"function","doc":"Returns a GPG key for the given id."},{"ref":"GitGud.GPGKeyQuery.html#by_key_id/2","title":"GitGud.GPGKeyQuery.by_key_id/2","type":"function","doc":"Returns a GPG key for the given key_id."},{"ref":"GitGud.GPGKeyQuery.html#gpg_key_query/1","title":"GitGud.GPGKeyQuery.gpg_key_query/1","type":"function","doc":"Returns a query for fetching a single GPG key by id."},{"ref":"GitGud.GPGKeyQuery.html#gpg_keys_query/1","title":"GitGud.GPGKeyQuery.gpg_keys_query/1","type":"function","doc":""},{"ref":"GitGud.Issue.html","title":"GitGud.Issue","type":"module","doc":"Issue schema and helper functions."},{"ref":"GitGud.Issue.html#add_comment/3","title":"GitGud.Issue.add_comment/3","type":"function","doc":"Adds a new comment."},{"ref":"GitGud.Issue.html#changeset/2","title":"GitGud.Issue.changeset/2","type":"function","doc":"Returns an issue changeset for the given params."},{"ref":"GitGud.Issue.html#close/2","title":"GitGud.Issue.close/2","type":"function","doc":"Closes the given issue."},{"ref":"GitGud.Issue.html#close!/2","title":"GitGud.Issue.close!/2","type":"function","doc":"Similar to close/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Issue.html#create/1","title":"GitGud.Issue.create/1","type":"function","doc":"Creates a new issue with the given params. {:ok, issue} = GitGud.Issue.create(repo_id: repo.id, author_id: user.id, title: &quot;Help me!&quot;, comments: [author_id: user.id, body: &quot;I really need help.&quot;]) This function validates the given params using changeset/2."},{"ref":"GitGud.Issue.html#create!/1","title":"GitGud.Issue.create!/1","type":"function","doc":"Similar to create/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Issue.html#reopen/2","title":"GitGud.Issue.reopen/2","type":"function","doc":"Reopens the given issue."},{"ref":"GitGud.Issue.html#reopen!/2","title":"GitGud.Issue.reopen!/2","type":"function","doc":"Similar to reopen/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Issue.html#update_labels/3","title":"GitGud.Issue.update_labels/3","type":"function","doc":"Updates the labels of the given issue."},{"ref":"GitGud.Issue.html#update_labels!/3","title":"GitGud.Issue.update_labels!/3","type":"function","doc":"Similar to update_labels/2, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Issue.html#update_title/3","title":"GitGud.Issue.update_title/3","type":"function","doc":"Updates the title of the given issue."},{"ref":"GitGud.Issue.html#update_title!/3","title":"GitGud.Issue.update_title!/3","type":"function","doc":"Similar to update_title/2, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Issue.html#t:t/0","title":"GitGud.Issue.t/0","type":"type","doc":""},{"ref":"GitGud.IssueLabel.html","title":"GitGud.IssueLabel","type":"module","doc":"Issue label schema and helper functions."},{"ref":"GitGud.IssueLabel.html#changeset/2","title":"GitGud.IssueLabel.changeset/2","type":"function","doc":"Returns a label changeset for the given params."},{"ref":"GitGud.IssueLabel.html#t:t/0","title":"GitGud.IssueLabel.t/0","type":"type","doc":""},{"ref":"GitGud.IssueQuery.html","title":"GitGud.IssueQuery","type":"module","doc":"Conveniences for issue related queries."},{"ref":"GitGud.IssueQuery.html#by_id/2","title":"GitGud.IssueQuery.by_id/2","type":"function","doc":"Returns a repository issue for the given id."},{"ref":"GitGud.IssueQuery.html#comments_query/1","title":"GitGud.IssueQuery.comments_query/1","type":"function","doc":"Returns a query for fetching comments of an issue."},{"ref":"GitGud.IssueQuery.html#count_repo_issues/2","title":"GitGud.IssueQuery.count_repo_issues/2","type":"function","doc":"Returns the number of issues for the given repo."},{"ref":"GitGud.IssueQuery.html#count_repo_issues_query/2","title":"GitGud.IssueQuery.count_repo_issues_query/2","type":"function","doc":"Returns a query for counting the number of issues of a repository."},{"ref":"GitGud.IssueQuery.html#issue_query/1","title":"GitGud.IssueQuery.issue_query/1","type":"function","doc":"Returns a query for fetching a repository issue by its id."},{"ref":"GitGud.IssueQuery.html#repo_issue/3","title":"GitGud.IssueQuery.repo_issue/3","type":"function","doc":"Returns a repository issue for the given number."},{"ref":"GitGud.IssueQuery.html#repo_issue_query/2","title":"GitGud.IssueQuery.repo_issue_query/2","type":"function","doc":"Returns a query for fetching a repository issue by its number."},{"ref":"GitGud.IssueQuery.html#repo_issues/2","title":"GitGud.IssueQuery.repo_issues/2","type":"function","doc":"Returns all issues for the given repo."},{"ref":"GitGud.IssueQuery.html#repo_issues_query/1","title":"GitGud.IssueQuery.repo_issues_query/1","type":"function","doc":"Returns a query for fetching all repository issues."},{"ref":"GitGud.IssueQuery.html#repo_issues_query/2","title":"GitGud.IssueQuery.repo_issues_query/2","type":"function","doc":"Returns a query for fetching all repository issues with the given status."},{"ref":"GitGud.IssueQuery.html#repo_issues_with_comments_count/2","title":"GitGud.IssueQuery.repo_issues_with_comments_count/2","type":"function","doc":"Returns all issues and their number of comments for the given repo."},{"ref":"GitGud.IssueQuery.html#repo_issues_with_comments_count_query/2","title":"GitGud.IssueQuery.repo_issues_with_comments_count_query/2","type":"function","doc":"Returns a query for fetching all repository issues and their number of comments."},{"ref":"GitGud.IssueQuery.html#repo_labels/2","title":"GitGud.IssueQuery.repo_labels/2","type":"function","doc":"Returns all issue labels for the given repo."},{"ref":"GitGud.IssueQuery.html#repo_labels_query/1","title":"GitGud.IssueQuery.repo_labels_query/1","type":"function","doc":"Returns a query for fetching all issue labels of a repository."},{"ref":"GitGud.Maintainer.html","title":"GitGud.Maintainer","type":"module","doc":"Repository maintainer schema and helper functions. A GitGud.Maintainer is primarly used to associate GitGud.User to GitGud.Repo. Each repository maintainer also has a permission defining which actions he is able to perform on the repository. Following permissions are available: :read -- can read and clone the repository. :write -- can read, clone and push to the repository. :admin -- can read, clone, push and administrate the repository. By default, a newly created repository maintainer has :read permission. Use update_permission/2 to change a maintainer&#39;s permission."},{"ref":"GitGud.Maintainer.html#changeset/2","title":"GitGud.Maintainer.changeset/2","type":"function","doc":"Returns a maintainer changeset for the given params."},{"ref":"GitGud.Maintainer.html#create/1","title":"GitGud.Maintainer.create/1","type":"function","doc":"Creates a new maintainer with the given params. {:ok, maintainer} = GitGud.Maintainer.create(user_id: user.id, repo_id: repo.id) This function validates the given params using changeset/2."},{"ref":"GitGud.Maintainer.html#create!/1","title":"GitGud.Maintainer.create!/1","type":"function","doc":"Similar to create/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Maintainer.html#delete/1","title":"GitGud.Maintainer.delete/1","type":"function","doc":"Deletes the given maintainer."},{"ref":"GitGud.Maintainer.html#delete!/1","title":"GitGud.Maintainer.delete!/1","type":"function","doc":"Similar to delete!/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Maintainer.html#update_permission/2","title":"GitGud.Maintainer.update_permission/2","type":"function","doc":"Updates the permission of the given maintainer."},{"ref":"GitGud.Maintainer.html#update_permission/3","title":"GitGud.Maintainer.update_permission/3","type":"function","doc":"Updates the permission of the given user for the given repo."},{"ref":"GitGud.Maintainer.html#update_permission!/2","title":"GitGud.Maintainer.update_permission!/2","type":"function","doc":"Similar to update_permission/2, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Maintainer.html#update_permission!/3","title":"GitGud.Maintainer.update_permission!/3","type":"function","doc":"Similar to update_permission/3, but raises an Ecto.NoResultsError if an error occurs."},{"ref":"GitGud.Maintainer.html#t:t/0","title":"GitGud.Maintainer.t/0","type":"type","doc":""},{"ref":"GitGud.Repo.html","title":"GitGud.Repo","type":"module","doc":"Git repository schema and helper functions."},{"ref":"GitGud.Repo.html#changeset/2","title":"GitGud.Repo.changeset/2","type":"function","doc":"Returns a repository changeset for the given params."},{"ref":"GitGud.Repo.html#create/2","title":"GitGud.Repo.create/2","type":"function","doc":"Creates a new repository. {:ok, repo, git_handle} = GitGud.Repo.create( owner_id: user.id, name: &quot;gitgud&quot;, description: &quot;GitHub clone entirely written in Elixir.&quot;, public: true ) This function validates the given params using changeset/2."},{"ref":"GitGud.Repo.html#create!/2","title":"GitGud.Repo.create!/2","type":"function","doc":"Similar to create/2, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Repo.html#delete/1","title":"GitGud.Repo.delete/1","type":"function","doc":"Deletes the given repo. Repository associations (maintainers, issues, etc.) and related Git data will automatically be deleted."},{"ref":"GitGud.Repo.html#delete!/1","title":"GitGud.Repo.delete!/1","type":"function","doc":"Similar to delete!/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Repo.html#issue_labels_changeset/2","title":"GitGud.Repo.issue_labels_changeset/2","type":"function","doc":"Returns a repository changeset for manipulating associated issue labels."},{"ref":"GitGud.Repo.html#maintainer/2","title":"GitGud.Repo.maintainer/2","type":"function","doc":"Returns a single GitGud.Maintainer for the given repo and user."},{"ref":"GitGud.Repo.html#maintainers/1","title":"GitGud.Repo.maintainers/1","type":"function","doc":"Returns the list of associated GitGud.Maintainer for the given repo."},{"ref":"GitGud.Repo.html#update/2","title":"GitGud.Repo.update/2","type":"function","doc":"Updates the given repo with the given params. {:ok, repo} = GitGud.Repo.update(repo, description: &quot;Host open-source project without hassle.&quot;) This function validates the given params using changeset/2."},{"ref":"GitGud.Repo.html#update!/2","title":"GitGud.Repo.update!/2","type":"function","doc":"Similar to update/2, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Repo.html#update_issue_labels/2","title":"GitGud.Repo.update_issue_labels/2","type":"function","doc":"Updates the given repo associated issues labels with the given params."},{"ref":"GitGud.Repo.html#update_issue_labels!/2","title":"GitGud.Repo.update_issue_labels!/2","type":"function","doc":"Similar to update_issue_labels/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.Repo.html#t:t/0","title":"GitGud.Repo.t/0","type":"type","doc":""},{"ref":"GitGud.RepoQuery.html","title":"GitGud.RepoQuery","type":"module","doc":"Conveniences for repository related queries."},{"ref":"GitGud.RepoQuery.html#by_id/2","title":"GitGud.RepoQuery.by_id/2","type":"function","doc":"Returns a repository for the given id."},{"ref":"GitGud.RepoQuery.html#by_path/2","title":"GitGud.RepoQuery.by_path/2","type":"function","doc":"Returns a repository for the given path."},{"ref":"GitGud.RepoQuery.html#repo_query/1","title":"GitGud.RepoQuery.repo_query/1","type":"function","doc":"Returns a query for fetching a repositories by id."},{"ref":"GitGud.RepoQuery.html#search/2","title":"GitGud.RepoQuery.search/2","type":"function","doc":"Returns a list of users matching the given input."},{"ref":"GitGud.RepoQuery.html#search_query/1","title":"GitGud.RepoQuery.search_query/1","type":"function","doc":"Returns a query for searching repositories."},{"ref":"GitGud.RepoQuery.html#user_repo/3","title":"GitGud.RepoQuery.user_repo/3","type":"function","doc":"Returns a single repository for the given user and name."},{"ref":"GitGud.RepoQuery.html#user_repo_query/2","title":"GitGud.RepoQuery.user_repo_query/2","type":"function","doc":"Returns a query for fetching a single repository for the given user and name."},{"ref":"GitGud.RepoQuery.html#user_repos/2","title":"GitGud.RepoQuery.user_repos/2","type":"function","doc":"Returns a list of repositories for the given user."},{"ref":"GitGud.RepoQuery.html#user_repos_query/1","title":"GitGud.RepoQuery.user_repos_query/1","type":"function","doc":"Returns a query for fetching user repositories."},{"ref":"GitGud.RepoQuery.html#t:user_param/0","title":"GitGud.RepoQuery.user_param/0","type":"type","doc":""},{"ref":"GitGud.RepoStorage.html","title":"GitGud.RepoStorage","type":"module","doc":"Conveniences for storing Git objects and meta objects."},{"ref":"GitGud.RepoStorage.html#cleanup/1","title":"GitGud.RepoStorage.cleanup/1","type":"function","doc":"Removes associated data for the given repo."},{"ref":"GitGud.RepoStorage.html#init/2","title":"GitGud.RepoStorage.init/2","type":"function","doc":"Initializes a new Git repository for the given repo."},{"ref":"GitGud.RepoStorage.html#init_param/1","title":"GitGud.RepoStorage.init_param/1","type":"function","doc":"Returns an initialization parameter for the given repo."},{"ref":"GitGud.RepoStorage.html#push/3","title":"GitGud.RepoStorage.push/3","type":"function","doc":"Writes the given receive_pack objects and references to the given repo. This function is called by GitGud.SSHServer and GitGud.SmartHTTPBackend on each push command. It is responsible for writing objects and references to the underlying Git repository."},{"ref":"GitGud.RepoStorage.html#rename/2","title":"GitGud.RepoStorage.rename/2","type":"function","doc":"Renames the given repo."},{"ref":"GitGud.RepoStorage.html#workdir/1","title":"GitGud.RepoStorage.workdir/1","type":"function","doc":"Returns the absolute path to the Git workdir for the given repo. The path is a concatenation of the Git root path, repo.owner.login and repo.name."},{"ref":"GitGud.ReviewQuery.html","title":"GitGud.ReviewQuery","type":"module","doc":"Conveniences for review related queries."},{"ref":"GitGud.ReviewQuery.html#comments_query/1","title":"GitGud.ReviewQuery.comments_query/1","type":"function","doc":"Returns a query for fetching comments of a review."},{"ref":"GitGud.ReviewQuery.html#commit_comment_count/2","title":"GitGud.ReviewQuery.commit_comment_count/2","type":"function","doc":"Returns the number of comments for the given repo and commit."},{"ref":"GitGud.ReviewQuery.html#commit_comment_count_query/2","title":"GitGud.ReviewQuery.commit_comment_count_query/2","type":"function","doc":"Returns a query for counting the number of reviews for a single commit or a list of commits."},{"ref":"GitGud.ReviewQuery.html#commit_line_review/6","title":"GitGud.ReviewQuery.commit_line_review/6","type":"function","doc":"Returns a commit line review for the given repo, commit, blob_oid, hunk and line."},{"ref":"GitGud.ReviewQuery.html#commit_line_review_by_id/2","title":"GitGud.ReviewQuery.commit_line_review_by_id/2","type":"function","doc":"Returns a commit line review for the given id."},{"ref":"GitGud.ReviewQuery.html#commit_line_review_query/1","title":"GitGud.ReviewQuery.commit_line_review_query/1","type":"function","doc":"Returns a query for fetching a single commit line review."},{"ref":"GitGud.ReviewQuery.html#commit_line_review_query/2","title":"GitGud.ReviewQuery.commit_line_review_query/2","type":"function","doc":"Returns a query for fetching a single commit line review."},{"ref":"GitGud.ReviewQuery.html#commit_line_review_query/5","title":"GitGud.ReviewQuery.commit_line_review_query/5","type":"function","doc":"Returns a query for fetching a single commit line review."},{"ref":"GitGud.ReviewQuery.html#commit_line_reviews/3","title":"GitGud.ReviewQuery.commit_line_reviews/3","type":"function","doc":"Returns all commit line reviews for the given repo and commit."},{"ref":"GitGud.ReviewQuery.html#commit_line_reviews_query/2","title":"GitGud.ReviewQuery.commit_line_reviews_query/2","type":"function","doc":"Returns a query for fetching all commit line reviews."},{"ref":"GitGud.ReviewQuery.html#commit_review/3","title":"GitGud.ReviewQuery.commit_review/3","type":"function","doc":"Returns a commit review for the given repo and commit."},{"ref":"GitGud.ReviewQuery.html#commit_review_by_id/2","title":"GitGud.ReviewQuery.commit_review_by_id/2","type":"function","doc":"Returns a commit review for the given id."},{"ref":"GitGud.ReviewQuery.html#commit_review_query/1","title":"GitGud.ReviewQuery.commit_review_query/1","type":"function","doc":"Returns a query for fetching a single commit review."},{"ref":"GitGud.ReviewQuery.html#commit_review_query/2","title":"GitGud.ReviewQuery.commit_review_query/2","type":"function","doc":"Returns a query for fetching a single commit review."},{"ref":"GitGud.SSHKey.html","title":"GitGud.SSHKey","type":"module","doc":"Secure Shell (SSH) authentication key schema and helper functions. An GitGud.SSHKey is used to authenticate users via Public Key Authentication in GitGud.SSHServer."},{"ref":"GitGud.SSHKey.html#changeset/2","title":"GitGud.SSHKey.changeset/2","type":"function","doc":"Returns a SSH key changeset for the given params. If :name is omitted and the given public key contains a comment, the comment will be used as :name. This function computes (see :public_key.ssh_decode/2 and :public_key.ssh_hostkey_fingerprint/1) and stores a fingerprint of the public key. It does not save the given :data into the database."},{"ref":"GitGud.SSHKey.html#create/1","title":"GitGud.SSHKey.create/1","type":"function","doc":"Creates a new SSH key with the given params. {:ok, ssh_key} = GitGud.SSHKey.create(user_id: user.id, name: &quot;My SSH Key&quot;, data: &quot;ssh-rsa AAAAB3NzaC1yc2...&quot;) This function validates the given params using changeset/2."},{"ref":"GitGud.SSHKey.html#create!/1","title":"GitGud.SSHKey.create!/1","type":"function","doc":"Similar to create/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.SSHKey.html#delete/1","title":"GitGud.SSHKey.delete/1","type":"function","doc":"Deletes the given ssh_key."},{"ref":"GitGud.SSHKey.html#delete!/1","title":"GitGud.SSHKey.delete!/1","type":"function","doc":"Similar to delete!/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.SSHKey.html#update_timestamp/1","title":"GitGud.SSHKey.update_timestamp/1","type":"function","doc":"Updates the :used_at timestamp for the the given ssh_key."},{"ref":"GitGud.SSHKey.html#update_timestamp!/1","title":"GitGud.SSHKey.update_timestamp!/1","type":"function","doc":"Similar to update_timestamp/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.SSHKey.html#t:t/0","title":"GitGud.SSHKey.t/0","type":"type","doc":""},{"ref":"GitGud.User.html","title":"GitGud.User","type":"module","doc":"User account schema and helper functions."},{"ref":"GitGud.User.html#create/1","title":"GitGud.User.create/1","type":"function","doc":"Creates a new user with the given params. {:ok, user} = GitGud.User.create( login: &quot;redrabbit&quot;, name: &quot;Mario Flach&quot;, emails: [ %{address: &quot;m.flach@almightycouch.com&quot;} ], auth: %{ password: &quot;qwertz&quot; } ) This function validates the given params using registration_changeset/2."},{"ref":"GitGud.User.html#create!/1","title":"GitGud.User.create!/1","type":"function","doc":"Similar to create/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.User.html#delete/1","title":"GitGud.User.delete/1","type":"function","doc":"Deletes the given user. User associations (emails, repositories, etc.) will automatically be deleted."},{"ref":"GitGud.User.html#delete!/1","title":"GitGud.User.delete!/1","type":"function","doc":"Similar to delete!/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.User.html#email_changeset/3","title":"GitGud.User.email_changeset/3","type":"function","doc":"Returns an email changeset for the given email."},{"ref":"GitGud.User.html#oauth2_changeset/2","title":"GitGud.User.oauth2_changeset/2","type":"function","doc":"Returns an OAuth2.0 changeset for the given params."},{"ref":"GitGud.User.html#password_changeset/2","title":"GitGud.User.password_changeset/2","type":"function","doc":"Returns a password changeset for the given params."},{"ref":"GitGud.User.html#profile_changeset/2","title":"GitGud.User.profile_changeset/2","type":"function","doc":"Returns a profile changeset for the given params."},{"ref":"GitGud.User.html#registration_changeset/2","title":"GitGud.User.registration_changeset/2","type":"function","doc":"Returns a registration changeset for the given params."},{"ref":"GitGud.User.html#update/3","title":"GitGud.User.update/3","type":"function","doc":"Updates the given user with the given changeset_type and params. {:ok, user} = GitGud.User.update(user, :profile, name: &quot;Mario Bros&quot;) Following changeset types are available: :profile -- see profile_changeset/2. :password -- see password_changeset/2. :oauth2 -- see oauth2_changeset/2. This function can also be used to update email associations, for example: {:ok, user} = GitGud.User.update(user, :primary_email, email)"},{"ref":"GitGud.User.html#update!/3","title":"GitGud.User.update!/3","type":"function","doc":"Similar to update/3, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.User.html#verified?/1","title":"GitGud.User.verified?/1","type":"function","doc":"Returns true is user is verified; otherwise returns false."},{"ref":"GitGud.User.html#t:t/0","title":"GitGud.User.t/0","type":"type","doc":""},{"ref":"GitGud.UserQuery.html","title":"GitGud.UserQuery","type":"module","doc":"Conveniences for user related queries."},{"ref":"GitGud.UserQuery.html#by_email/2","title":"GitGud.UserQuery.by_email/2","type":"function","doc":"Returns a user for the given email."},{"ref":"GitGud.UserQuery.html#by_id/2","title":"GitGud.UserQuery.by_id/2","type":"function","doc":"Returns a user for the given id."},{"ref":"GitGud.UserQuery.html#by_login/2","title":"GitGud.UserQuery.by_login/2","type":"function","doc":"Returns a user for the given login."},{"ref":"GitGud.UserQuery.html#by_oauth/3","title":"GitGud.UserQuery.by_oauth/3","type":"function","doc":"Returns a user for the given authentication provider and id."},{"ref":"GitGud.UserQuery.html#by_ssh_key/2","title":"GitGud.UserQuery.by_ssh_key/2","type":"function","doc":"Returns a user for the given SSH key fingerprint."},{"ref":"GitGud.UserQuery.html#search/2","title":"GitGud.UserQuery.search/2","type":"function","doc":"Returns a list of users matching the given input."},{"ref":"GitGud.UserQuery.html#search_query/1","title":"GitGud.UserQuery.search_query/1","type":"function","doc":"Returns a query for searching users."},{"ref":"GitGud.UserQuery.html#user_oauth_query/2","title":"GitGud.UserQuery.user_oauth_query/2","type":"function","doc":"Returns a query for fetching a single user by authentication token."},{"ref":"GitGud.UserQuery.html#user_query/1","title":"GitGud.UserQuery.user_query/1","type":"function","doc":"Returns a query for fetching a single user by id."},{"ref":"GitGud.UserQuery.html#user_query/2","title":"GitGud.UserQuery.user_query/2","type":"function","doc":"Returns a query for fetching a single user by key and val."},{"ref":"GitGud.UserQuery.html#user_ssh_key_query/1","title":"GitGud.UserQuery.user_ssh_key_query/1","type":"function","doc":"Returns a query for fetching a single user by SSH fingerprint."},{"ref":"GitGud.UserQuery.html#users_query/1","title":"GitGud.UserQuery.users_query/1","type":"function","doc":"Returns a query for fetching users by ids."},{"ref":"GitGud.UserQuery.html#users_query/2","title":"GitGud.UserQuery.users_query/2","type":"function","doc":"Returns a query for fetching users by key and vals."},{"ref":"GitGud.SSHServer.html","title":"GitGud.SSHServer","type":"module","doc":"Secure Shell (SSH) server providing support for Git server commands. The server handles following Git commands: git-receive-pack - corresponding server-side command to git push. git-upload-pack - corresponding server-side command to git fetch. A registered GitGud.User can authenticate with following methods: public-key - if any of the associated GitGud.SSHKey matches. password - if the given credentials are correct. interactive - interactive login prompt allowing several tries. See GitGud.Authorization for more details."},{"ref":"GitGud.SSHServer.html#child_spec/1","title":"GitGud.SSHServer.child_spec/1","type":"function","doc":"Returns a child-spec to use as part of a supervision tree."},{"ref":"GitGud.SSHServer.html#t:t/0","title":"GitGud.SSHServer.t/0","type":"type","doc":""},{"ref":"GitGud.SmartHTTPBackend.html","title":"GitGud.SmartHTTPBackend","type":"module","doc":"Plug providing support for Git server commands over HTTP. This plug handles following Git commands: git-receive-pack - corresponding server-side command to git push. git-upload-pack - corresponding server-side command to git fetch. A registered GitGud.User can authenticate over HTTP via Basic Authentication. This is only, required for commands requiring specific permissions (such as pushing commits and cloning private repos). See GitGud.Authorization for more details."},{"ref":"GitGud.SmartHTTPBackend.html#call/2","title":"GitGud.SmartHTTPBackend.call/2","type":"function","doc":"Callback implementation for Plug.call/2."},{"ref":"GitGud.SmartHTTPBackend.html#init/1","title":"GitGud.SmartHTTPBackend.init/1","type":"function","doc":"Callback implementation for Plug.init/1."},{"ref":"GitGud.OAuth2.Provider.html","title":"GitGud.OAuth2.Provider","type":"module","doc":"OAuth2.0 provider schema and helper functions."},{"ref":"GitGud.OAuth2.Provider.html#changeset/2","title":"GitGud.OAuth2.Provider.changeset/2","type":"function","doc":"Returns an authentication provider changeset for the given params."},{"ref":"GitGud.OAuth2.Provider.html#create/1","title":"GitGud.OAuth2.Provider.create/1","type":"function","doc":"Creates a new OAuth2.0 provider with the given params. {:ok, provider} = GitGud.OAuth2.Provider.create(auth_id: user.auth.id, provider: &quot;github&quot;, provider_id: 12345, token: &quot;2c0d6d13ca2e34ac557e181373f120d15c4fdd21&quot;) This function validates the given params using changeset/2."},{"ref":"GitGud.OAuth2.Provider.html#create!/1","title":"GitGud.OAuth2.Provider.create!/1","type":"function","doc":"Similar to create/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.OAuth2.Provider.html#delete/1","title":"GitGud.OAuth2.Provider.delete/1","type":"function","doc":"Deletes the given OAuth2.0 provider."},{"ref":"GitGud.OAuth2.Provider.html#delete!/1","title":"GitGud.OAuth2.Provider.delete!/1","type":"function","doc":"Similar to delete!/1, but raises an Ecto.InvalidChangesetError if an error occurs."},{"ref":"GitGud.OAuth2.Provider.html#t:t/0","title":"GitGud.OAuth2.Provider.t/0","type":"type","doc":""},{"ref":"GitGud.OAuth2.GitHub.html","title":"GitGud.OAuth2.GitHub","type":"module","doc":"An OAuth2.0 authentication strategy for GitHub."},{"ref":"GitGud.OAuth2.GitHub.html#new/0","title":"GitGud.OAuth2.GitHub.new/0","type":"function","doc":"Returns a new OAuth2.0 client."},{"ref":"GitGud.OAuth2.GitLab.html","title":"GitGud.OAuth2.GitLab","type":"module","doc":"An OAuth2.0 authentication strategy for GitLab."},{"ref":"GitGud.OAuth2.GitLab.html#new/0","title":"GitGud.OAuth2.GitLab.new/0","type":"function","doc":"Returns a new OAuth2.0 client."},{"ref":"GitGud.GraphQL.Resolvers.html","title":"GitGud.GraphQL.Resolvers","type":"module","doc":"Module providing resolution functions for GraphQL related queries."},{"ref":"GitGud.GraphQL.Resolvers.html#close_issue/3","title":"GitGud.GraphQL.Resolvers.close_issue/3","type":"function","doc":"Closes a repository issue."},{"ref":"GitGud.GraphQL.Resolvers.html#comment_author/3","title":"GitGud.GraphQL.Resolvers.comment_author/3","type":"function","doc":"Resolves the author for a given comment."},{"ref":"GitGud.GraphQL.Resolvers.html#comment_deletable/3","title":"GitGud.GraphQL.Resolvers.comment_deletable/3","type":"function","doc":"Returns true if the viewer can delete a given comment; otherwise, returns false."},{"ref":"GitGud.GraphQL.Resolvers.html#comment_deleted/2","title":"GitGud.GraphQL.Resolvers.comment_deleted/2","type":"function","doc":"Returns the subscription topic for comment delete events."},{"ref":"GitGud.GraphQL.Resolvers.html#comment_editable/3","title":"GitGud.GraphQL.Resolvers.comment_editable/3","type":"function","doc":"Returns true if the viewer can edit a given comment; otherwise, returns false."},{"ref":"GitGud.GraphQL.Resolvers.html#comment_html/3","title":"GitGud.GraphQL.Resolvers.comment_html/3","type":"function","doc":"Resolves the HTML content of a given comment."},{"ref":"GitGud.GraphQL.Resolvers.html#comment_repo/3","title":"GitGud.GraphQL.Resolvers.comment_repo/3","type":"function","doc":"Resolves the repository for a given comment."},{"ref":"GitGud.GraphQL.Resolvers.html#comment_updated/2","title":"GitGud.GraphQL.Resolvers.comment_updated/2","type":"function","doc":"Returns the subscription topic for comment update events."},{"ref":"GitGud.GraphQL.Resolvers.html#commit_line_review/3","title":"GitGud.GraphQL.Resolvers.commit_line_review/3","type":"function","doc":"Resolves the line review for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#commit_line_review_comment_topic/2","title":"GitGud.GraphQL.Resolvers.commit_line_review_comment_topic/2","type":"function","doc":"Returns the subscription topic for commit line review comment events."},{"ref":"GitGud.GraphQL.Resolvers.html#commit_line_review_comments/2","title":"GitGud.GraphQL.Resolvers.commit_line_review_comments/2","type":"function","doc":"Resolves comments for a commit line review."},{"ref":"GitGud.GraphQL.Resolvers.html#commit_line_review_created/2","title":"GitGud.GraphQL.Resolvers.commit_line_review_created/2","type":"function","doc":"Returns the subscription topic for commit line review create event."},{"ref":"GitGud.GraphQL.Resolvers.html#commit_line_reviews/3","title":"GitGud.GraphQL.Resolvers.commit_line_reviews/3","type":"function","doc":"Resolves the line reviews for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#commit_review/3","title":"GitGud.GraphQL.Resolvers.commit_review/3","type":"function","doc":"Resolves the review for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#commit_review_comment_topic/2","title":"GitGud.GraphQL.Resolvers.commit_review_comment_topic/2","type":"function","doc":"Returns the subscription topic for commit review comment events."},{"ref":"GitGud.GraphQL.Resolvers.html#commit_review_comments/2","title":"GitGud.GraphQL.Resolvers.commit_review_comments/2","type":"function","doc":"Resolves comments for a commit review."},{"ref":"GitGud.GraphQL.Resolvers.html#create_commit_line_review_comment/3","title":"GitGud.GraphQL.Resolvers.create_commit_line_review_comment/3","type":"function","doc":"Creates a Git line commit review comment."},{"ref":"GitGud.GraphQL.Resolvers.html#create_commit_review_comment/3","title":"GitGud.GraphQL.Resolvers.create_commit_review_comment/3","type":"function","doc":"Creates a Git commit review commit."},{"ref":"GitGud.GraphQL.Resolvers.html#create_issue_comment/3","title":"GitGud.GraphQL.Resolvers.create_issue_comment/3","type":"function","doc":"Creates a repository issue comment."},{"ref":"GitGud.GraphQL.Resolvers.html#delete_comment/3","title":"GitGud.GraphQL.Resolvers.delete_comment/3","type":"function","doc":"Deletes a comment."},{"ref":"GitGud.GraphQL.Resolvers.html#git_actor_type/2","title":"GitGud.GraphQL.Resolvers.git_actor_type/2","type":"function","doc":"Resolves the type for a given Git actor."},{"ref":"GitGud.GraphQL.Resolvers.html#git_blob_size/3","title":"GitGud.GraphQL.Resolvers.git_blob_size/3","type":"function","doc":"Resolves the content length for a given Git blob object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_commit_author/3","title":"GitGud.GraphQL.Resolvers.git_commit_author/3","type":"function","doc":"Resolves the author for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_commit_committer/3","title":"GitGud.GraphQL.Resolvers.git_commit_committer/3","type":"function","doc":"Resolves the committer for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_commit_message/3","title":"GitGud.GraphQL.Resolvers.git_commit_message/3","type":"function","doc":"Resolves the message for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_commit_parents/2","title":"GitGud.GraphQL.Resolvers.git_commit_parents/2","type":"function","doc":"Resolves the parents for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_commit_timestamp/3","title":"GitGud.GraphQL.Resolvers.git_commit_timestamp/3","type":"function","doc":"Resolves the timestamp for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_history/2","title":"GitGud.GraphQL.Resolvers.git_history/2","type":"function","doc":"Resolves the commit history starting from the given Git revision object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_object_type/2","title":"GitGud.GraphQL.Resolvers.git_object_type/2","type":"function","doc":"Resolves the type for a given Git object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_reference_target/3","title":"GitGud.GraphQL.Resolvers.git_reference_target/3","type":"function","doc":"Resolves the Git target for the given Git reference object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_reference_type/3","title":"GitGud.GraphQL.Resolvers.git_reference_type/3","type":"function","doc":"Resolves the type for a given Git tag."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tag_author/3","title":"GitGud.GraphQL.Resolvers.git_tag_author/3","type":"function","doc":"Resolves the author for a given Git tag object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tag_message/3","title":"GitGud.GraphQL.Resolvers.git_tag_message/3","type":"function","doc":"Resolves the message for a given Git tag object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tag_target/3","title":"GitGud.GraphQL.Resolvers.git_tag_target/3","type":"function","doc":"Resolves the Git target for the given Git tag object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tag_type/2","title":"GitGud.GraphQL.Resolvers.git_tag_type/2","type":"function","doc":"Resolves the type for a given Git tag."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tree/3","title":"GitGud.GraphQL.Resolvers.git_tree/3","type":"function","doc":"Resolves the tree for a given Git commit object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tree_entries/2","title":"GitGud.GraphQL.Resolvers.git_tree_entries/2","type":"function","doc":"Resolves the tree entries for a given Git tree object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tree_entries_with_last_commit/2","title":"GitGud.GraphQL.Resolvers.git_tree_entries_with_last_commit/2","type":"function","doc":"Resolves the tree entries and their associated commit for a given pathspec."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tree_entry_target/3","title":"GitGud.GraphQL.Resolvers.git_tree_entry_target/3","type":"function","doc":"Returns the underlying Git object for a given Git tree_entry object."},{"ref":"GitGud.GraphQL.Resolvers.html#git_tree_entry_with_last_commit/2","title":"GitGud.GraphQL.Resolvers.git_tree_entry_with_last_commit/2","type":"function","doc":"Resolves the tree entries and their associated commit for a given pathspec."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_author/3","title":"GitGud.GraphQL.Resolvers.issue_author/3","type":"function","doc":"Resolves the author for a given comment."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_comments/2","title":"GitGud.GraphQL.Resolvers.issue_comments/2","type":"function","doc":"Resolves comments for an issue."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_commit_reference_event_oid/3","title":"GitGud.GraphQL.Resolvers.issue_commit_reference_event_oid/3","type":"function","doc":"Resolves the commit OID for a given issue event."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_commit_reference_event_url/3","title":"GitGud.GraphQL.Resolvers.issue_commit_reference_event_url/3","type":"function","doc":"Resolves the commit URL for a given issue event."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_editable/3","title":"GitGud.GraphQL.Resolvers.issue_editable/3","type":"function","doc":"Returns true if the viewer can edit a given issue; otherwise, returns false."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_event_field/4","title":"GitGud.GraphQL.Resolvers.issue_event_field/4","type":"function","doc":"Resolves the field of a given issue event."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_event_timestamp/3","title":"GitGud.GraphQL.Resolvers.issue_event_timestamp/3","type":"function","doc":"Resolves the timestamp for a given issue event."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_event_type/2","title":"GitGud.GraphQL.Resolvers.issue_event_type/2","type":"function","doc":"Resolves the type of a given issue event."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_event_user/3","title":"GitGud.GraphQL.Resolvers.issue_event_user/3","type":"function","doc":"Resolves the user for a given issue event."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_labels_update_event_pull_labels/3","title":"GitGud.GraphQL.Resolvers.issue_labels_update_event_pull_labels/3","type":"function","doc":"Resolves the pull labels ids for a given issue event."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_labels_update_event_push_labels/3","title":"GitGud.GraphQL.Resolvers.issue_labels_update_event_push_labels/3","type":"function","doc":"Resolves the push labels ids for a given issue event."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_repo/3","title":"GitGud.GraphQL.Resolvers.issue_repo/3","type":"function","doc":"Resolves the repository for a given issue."},{"ref":"GitGud.GraphQL.Resolvers.html#issue_topic/2","title":"GitGud.GraphQL.Resolvers.issue_topic/2","type":"function","doc":"Returns the subscription topic for issue comment events."},{"ref":"GitGud.GraphQL.Resolvers.html#node/3","title":"GitGud.GraphQL.Resolvers.node/3","type":"function","doc":"Resolves a node object."},{"ref":"GitGud.GraphQL.Resolvers.html#node_type/2","title":"GitGud.GraphQL.Resolvers.node_type/2","type":"function","doc":"Resolves a node object type."},{"ref":"GitGud.GraphQL.Resolvers.html#reopen_issue/3","title":"GitGud.GraphQL.Resolvers.reopen_issue/3","type":"function","doc":"Reopens a repository issue."},{"ref":"GitGud.GraphQL.Resolvers.html#repo/2","title":"GitGud.GraphQL.Resolvers.repo/2","type":"function","doc":"Resolves a repository object."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_head/3","title":"GitGud.GraphQL.Resolvers.repo_head/3","type":"function","doc":"Resolves the default branch object for a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_issue/3","title":"GitGud.GraphQL.Resolvers.repo_issue/3","type":"function","doc":"Resolves a single issue of a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_issue_labels/3","title":"GitGud.GraphQL.Resolvers.repo_issue_labels/3","type":"function","doc":"Resolvers the issue labels associated to a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_issues/2","title":"GitGud.GraphQL.Resolvers.repo_issues/2","type":"function","doc":"Resolves issues for a repository."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_object/3","title":"GitGud.GraphQL.Resolvers.repo_object/3","type":"function","doc":"Resolves a Git object by OID for a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_ref/3","title":"GitGud.GraphQL.Resolvers.repo_ref/3","type":"function","doc":"Resolves a Git reference object by name for a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_refs/2","title":"GitGud.GraphQL.Resolvers.repo_refs/2","type":"function","doc":"Resolves all Git reference objects for a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_revision/3","title":"GitGud.GraphQL.Resolvers.repo_revision/3","type":"function","doc":"Resolves a Git commit by revision spec for a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_tag/3","title":"GitGud.GraphQL.Resolvers.repo_tag/3","type":"function","doc":"Resolves a Git tag object by name for a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#repo_tags/2","title":"GitGud.GraphQL.Resolvers.repo_tags/2","type":"function","doc":"Resolves all Git tag objects for a given repo."},{"ref":"GitGud.GraphQL.Resolvers.html#search/2","title":"GitGud.GraphQL.Resolvers.search/2","type":"function","doc":"Resolves a list of users for a given search term."},{"ref":"GitGud.GraphQL.Resolvers.html#search_result_type/2","title":"GitGud.GraphQL.Resolvers.search_result_type/2","type":"function","doc":"Returns the search result type."},{"ref":"GitGud.GraphQL.Resolvers.html#update_comment/3","title":"GitGud.GraphQL.Resolvers.update_comment/3","type":"function","doc":"Updates a comment."},{"ref":"GitGud.GraphQL.Resolvers.html#update_issue_labels/3","title":"GitGud.GraphQL.Resolvers.update_issue_labels/3","type":"function","doc":"Updates the label of an issue."},{"ref":"GitGud.GraphQL.Resolvers.html#update_issue_title/3","title":"GitGud.GraphQL.Resolvers.update_issue_title/3","type":"function","doc":"Updates the title of an issue."},{"ref":"GitGud.GraphQL.Resolvers.html#url/3","title":"GitGud.GraphQL.Resolvers.url/3","type":"function","doc":"Resolves the URL of the given resource."},{"ref":"GitGud.GraphQL.Resolvers.html#user/3","title":"GitGud.GraphQL.Resolvers.user/3","type":"function","doc":"Resolves an user object by login."},{"ref":"GitGud.GraphQL.Resolvers.html#user_public_email/3","title":"GitGud.GraphQL.Resolvers.user_public_email/3","type":"function","doc":"Resolves the public email for a given user."},{"ref":"GitGud.GraphQL.Resolvers.html#user_repo/3","title":"GitGud.GraphQL.Resolvers.user_repo/3","type":"function","doc":"Resolves a repository object by name for a given user."},{"ref":"GitGud.GraphQL.Resolvers.html#user_repos/2","title":"GitGud.GraphQL.Resolvers.user_repos/2","type":"function","doc":"Resolves all repositories for an user."},{"ref":"GitGud.GraphQL.Schema.html","title":"GitGud.GraphQL.Schema","type":"module","doc":"GraphQL schema definition."},{"ref":"GitGud.GraphQL.Schema.html#from_relay_id/1","title":"GitGud.GraphQL.Schema.from_relay_id/1","type":"function","doc":"Returns the source id for the given Relay global_id."},{"ref":"GitGud.GraphQL.Schema.html#from_relay_id/3","title":"GitGud.GraphQL.Schema.from_relay_id/3","type":"function","doc":"Returns the source struct for the given Relay global_id."},{"ref":"GitGud.GraphQL.Schema.html#to_relay_id/1","title":"GitGud.GraphQL.Schema.to_relay_id/1","type":"function","doc":"Returns the Relay global id for the given node."},{"ref":"GitGud.GraphQL.Schema.html#to_relay_id/2","title":"GitGud.GraphQL.Schema.to_relay_id/2","type":"function","doc":"Returns the Relay global id for the given source_id."},{"ref":"GitGud.GraphQL.Schema.Compiled.html","title":"GitGud.GraphQL.Schema.Compiled","type":"module","doc":""},{"ref":"GitGud.GraphQL.Types.html","title":"GitGud.GraphQL.Types","type":"module","doc":"GraphQL types for GitGud.GraphQL.Schema."},{"ref":"GitGud.Mailer.html","title":"GitGud.Mailer","type":"module","doc":"Conveniences for composing and sending emails."},{"ref":"GitGud.Mailer.html#deliver/1","title":"GitGud.Mailer.deliver/1","type":"function","doc":""},{"ref":"GitGud.Mailer.html#deliver_later/1","title":"GitGud.Mailer.deliver_later/1","type":"function","doc":""},{"ref":"GitGud.Mailer.html#deliver_now/2","title":"GitGud.Mailer.deliver_now/2","type":"function","doc":""},{"ref":"GitGud.Mailer.html#password_reset_email/1","title":"GitGud.Mailer.password_reset_email/1","type":"function","doc":"Returns a password reset mail for the given email."},{"ref":"GitGud.Mailer.html#render/3","title":"GitGud.Mailer.render/3","type":"function","doc":"Render an Phoenix template and set the body on the email. Pass an atom as the template name (:welcome_email) to render HTML and plain text emails. Use a string if you only want to render one type, e.g. &quot;welcome_email.text&quot; or &quot;welcome_email.html&quot;. Scroll to the top for more examples."},{"ref":"GitGud.Mailer.html#verification_email/1","title":"GitGud.Mailer.verification_email/1","type":"function","doc":"Returns a verification mail for the given email."},{"ref":"GitGud.Web.html","title":"GitGud.Web","type":"module","doc":"Module providing helper function for controllers, views, channels and so on. This can be used in your application as: use GitGud.Web, :controller use GitGud.Web, :view"},{"ref":"GitGud.Web.AuthenticationPlug.html","title":"GitGud.Web.AuthenticationPlug","type":"module","doc":"Plug providing support for multiple authentication methods."},{"ref":"GitGud.Web.AuthenticationPlug.html#authenticate/2","title":"GitGud.Web.AuthenticationPlug.authenticate/2","type":"function","doc":"Plug to authenticate conn with either authorization or session tokens."},{"ref":"GitGud.Web.AuthenticationPlug.html#authenticate_bearer_token/2","title":"GitGud.Web.AuthenticationPlug.authenticate_bearer_token/2","type":"function","doc":"Plug to authenticate conn with authorization tokens."},{"ref":"GitGud.Web.AuthenticationPlug.html#authenticate_session/2","title":"GitGud.Web.AuthenticationPlug.authenticate_session/2","type":"function","doc":"Plug to authenticate conn with session tokens."},{"ref":"GitGud.Web.AuthenticationPlug.html#authenticated?/1","title":"GitGud.Web.AuthenticationPlug.authenticated?/1","type":"function","doc":"Returns true if the given conn is authenticated; otherwise returns false."},{"ref":"GitGud.Web.AuthenticationPlug.html#authentication_token/1","title":"GitGud.Web.AuthenticationPlug.authentication_token/1","type":"function","doc":"Generates an authentication token."},{"ref":"GitGud.Web.AuthenticationPlug.html#current_user/1","title":"GitGud.Web.AuthenticationPlug.current_user/1","type":"function","doc":"Returns the current user if conn is authenticated."},{"ref":"GitGud.Web.AuthenticationPlug.html#ensure_authenticated/2","title":"GitGud.Web.AuthenticationPlug.ensure_authenticated/2","type":"function","doc":"Plug to ensure that the request is authenticated. If the given conn is not authenticated?/1, this prevents further plugs downstream from being invoked and returns a 401 Unauthenticated error."},{"ref":"GitGud.Web.CodebaseController.html","title":"GitGud.Web.CodebaseController","type":"module","doc":"Module responsible for CRUD actions on GitGud.Repo."},{"ref":"GitGud.Web.CodebaseController.html#blob/2","title":"GitGud.Web.CodebaseController.blob/2","type":"function","doc":"Renders a blob for a specific revision and path."},{"ref":"GitGud.Web.CodebaseController.html#branches/2","title":"GitGud.Web.CodebaseController.branches/2","type":"function","doc":"Renders all branches of a repository."},{"ref":"GitGud.Web.CodebaseController.html#commit/2","title":"GitGud.Web.CodebaseController.commit/2","type":"function","doc":"Renders a single commit."},{"ref":"GitGud.Web.CodebaseController.html#history/2","title":"GitGud.Web.CodebaseController.history/2","type":"function","doc":"Renders all commits for a specific revision."},{"ref":"GitGud.Web.CodebaseController.html#show/2","title":"GitGud.Web.CodebaseController.show/2","type":"function","doc":"Renders a repository codebase overview."},{"ref":"GitGud.Web.CodebaseController.html#tags/2","title":"GitGud.Web.CodebaseController.tags/2","type":"function","doc":"Renders all tags of a repository."},{"ref":"GitGud.Web.CodebaseController.html#tree/2","title":"GitGud.Web.CodebaseController.tree/2","type":"function","doc":"Renders a tree for a specific revision and path."},{"ref":"GitGud.Web.DateTimeFormatter.html","title":"GitGud.Web.DateTimeFormatter","type":"module","doc":"Conveniences for formatting DateTime, Date and Time values."},{"ref":"GitGud.Web.DateTimeFormatter.html#datetime_format/2","title":"GitGud.Web.DateTimeFormatter.datetime_format/2","type":"function","doc":"Renders a date/time widget using the given format string."},{"ref":"GitGud.Web.DateTimeFormatter.html#datetime_format_str/2","title":"GitGud.Web.DateTimeFormatter.datetime_format_str/2","type":"function","doc":"Formats a date/time value using the given format string."},{"ref":"GitGud.Web.EmailController.html","title":"GitGud.Web.EmailController","type":"module","doc":"Module responsible for CRUD actions on GitGud.Email."},{"ref":"GitGud.Web.EmailController.html#create/2","title":"GitGud.Web.EmailController.create/2","type":"function","doc":"Creates a new email address."},{"ref":"GitGud.Web.EmailController.html#delete/2","title":"GitGud.Web.EmailController.delete/2","type":"function","doc":"Deletes an email address."},{"ref":"GitGud.Web.EmailController.html#index/2","title":"GitGud.Web.EmailController.index/2","type":"function","doc":"Renders emails address."},{"ref":"GitGud.Web.EmailController.html#send_verification/2","title":"GitGud.Web.EmailController.send_verification/2","type":"function","doc":"Sends a verification email."},{"ref":"GitGud.Web.EmailController.html#update/2","title":"GitGud.Web.EmailController.update/2","type":"function","doc":"Updates an email address."},{"ref":"GitGud.Web.EmailController.html#verify/2","title":"GitGud.Web.EmailController.verify/2","type":"function","doc":"Verifies an email address using a bearer token."},{"ref":"GitGud.Web.Endpoint.html","title":"GitGud.Web.Endpoint","type":"module","doc":"HTTP and WebSocket endpoints."},{"ref":"GitGud.Web.Endpoint.html#broadcast/3","title":"GitGud.Web.Endpoint.broadcast/3","type":"function","doc":"Broadcasts a msg as event in the given topic. Callback implementation for Phoenix.Endpoint.broadcast/3."},{"ref":"GitGud.Web.Endpoint.html#broadcast!/3","title":"GitGud.Web.Endpoint.broadcast!/3","type":"function","doc":"Broadcasts a msg as event in the given topic. Raises in case of failures. Callback implementation for Phoenix.Endpoint.broadcast!/3."},{"ref":"GitGud.Web.Endpoint.html#broadcast_from/4","title":"GitGud.Web.Endpoint.broadcast_from/4","type":"function","doc":"Broadcasts a msg from the given from as event in the given topic. Callback implementation for Phoenix.Endpoint.broadcast_from/4."},{"ref":"GitGud.Web.Endpoint.html#broadcast_from!/4","title":"GitGud.Web.Endpoint.broadcast_from!/4","type":"function","doc":"Broadcasts a msg from the given from as event in the given topic. Raises in case of failures. Callback implementation for Phoenix.Endpoint.broadcast_from!/4."},{"ref":"GitGud.Web.Endpoint.html#call/2","title":"GitGud.Web.Endpoint.call/2","type":"function","doc":"Callback implementation for Plug.call/2."},{"ref":"GitGud.Web.Endpoint.html#child_spec/1","title":"GitGud.Web.Endpoint.child_spec/1","type":"function","doc":"Returns the child specification to start the endpoint under a supervision tree."},{"ref":"GitGud.Web.Endpoint.html#config/2","title":"GitGud.Web.Endpoint.config/2","type":"function","doc":"Returns the endpoint configuration for key Returns default if the key does not exist."},{"ref":"GitGud.Web.Endpoint.html#config_change/2","title":"GitGud.Web.Endpoint.config_change/2","type":"function","doc":"Reloads the configuration given the application environment changes."},{"ref":"GitGud.Web.Endpoint.html#host/0","title":"GitGud.Web.Endpoint.host/0","type":"function","doc":"Returns the host for the given endpoint."},{"ref":"GitGud.Web.Endpoint.html#init/1","title":"GitGud.Web.Endpoint.init/1","type":"function","doc":"Callback implementation for Plug.init/1."},{"ref":"GitGud.Web.Endpoint.html#instrument/3","title":"GitGud.Web.Endpoint.instrument/3","type":"macro","doc":"Instruments the given function. event is the event identifier (usually an atom) that specifies which instrumenting function to call in the instrumenter modules. runtime is metadata to be associated with the event at runtime (e.g., the query being issued if the event to instrument is a DB query). Examples instrument :render_view, %{view: &quot;index.html&quot;}, fn -&gt; render(conn, &quot;index.html&quot;) end"},{"ref":"GitGud.Web.Endpoint.html#node_name/0","title":"GitGud.Web.Endpoint.node_name/0","type":"function","doc":"An Absinthe.Subscription.Pubsub system may extend across multiple nodes connected by some mechanism. Regardless of this mechanism, all nodes should have unique names. Absinthe invokes node_name function to get current node&#39;s name. If you are running inside erlang cluster, you can use Kernel.node/0 as a node name. Callback implementation for Absinthe.Subscription.Pubsub.node_name/0."},{"ref":"GitGud.Web.Endpoint.html#path/1","title":"GitGud.Web.Endpoint.path/1","type":"function","doc":"Generates the path information when routing to this endpoint."},{"ref":"GitGud.Web.Endpoint.html#publish_mutation/3","title":"GitGud.Web.Endpoint.publish_mutation/3","type":"function","doc":"An Absinthe.Subscription.Pubsub system may extend across multiple nodes. Processes need only subscribe to the pubsub process that is running on their own node. However, mutations can happen on any node in the custer and must to be broadcast to other nodes so that they can also reevaluate their GraphQL subscriptions and notify subscribers on that node. When told of a mutation, Absinthe invokes the publish_mutation function on the node in which the mutation is processed first. The function should publish a message to the given proxy_topic, with the identity of node on which the mutation occurred included in the broadcast message. The message broadcast should be a map that contains, at least %{ node: node_name, # should be equal to [`node_name/0`](#node_name/0) mutation_result: …, # from arguments subscribed_fields: … # from arguments # other fields as needed } Callback implementation for Absinthe.Subscription.Pubsub.publish_mutation/3."},{"ref":"GitGud.Web.Endpoint.html#publish_subscription/2","title":"GitGud.Web.Endpoint.publish_subscription/2","type":"function","doc":"After a mutation is published, and Absinthe has re-run the necessary GraphQL subscriptions to generate a new set of resolved data, it calls publish_subscription. Your pubsub implementation should publish a message to the given topic, with the newly resolved data. The broadcast should be limited to the current node only. Callback implementation for Absinthe.Subscription.Pubsub.publish_subscription/2."},{"ref":"GitGud.Web.Endpoint.html#script_name/0","title":"GitGud.Web.Endpoint.script_name/0","type":"function","doc":"Generates the script name."},{"ref":"GitGud.Web.Endpoint.html#start_link/1","title":"GitGud.Web.Endpoint.start_link/1","type":"function","doc":"Starts the endpoint supervision tree."},{"ref":"GitGud.Web.Endpoint.html#static_integrity/1","title":"GitGud.Web.Endpoint.static_integrity/1","type":"function","doc":"Generates a base64-encoded cryptographic hash (sha512) to a static file in priv/static. Meant to be used for Subresource Integrity with CDNs."},{"ref":"GitGud.Web.Endpoint.html#static_lookup/1","title":"GitGud.Web.Endpoint.static_lookup/1","type":"function","doc":"Returns a two item tuple with the first item being the static_path and the second item being the static_integrity."},{"ref":"GitGud.Web.Endpoint.html#static_path/1","title":"GitGud.Web.Endpoint.static_path/1","type":"function","doc":"Generates a route to a static file in priv/static."},{"ref":"GitGud.Web.Endpoint.html#static_url/0","title":"GitGud.Web.Endpoint.static_url/0","type":"function","doc":"Generates the static URL without any path information. It uses the configuration under :static_url to generate such. It falls back to :url if :static_url is not set."},{"ref":"GitGud.Web.Endpoint.html#struct_url/0","title":"GitGud.Web.Endpoint.struct_url/0","type":"function","doc":"Generates the endpoint base URL but as a URI struct. It uses the configuration under :url to generate such. Useful for manipulating the URL data and passing it to URL helpers."},{"ref":"GitGud.Web.Endpoint.html#subscribe/1","title":"GitGud.Web.Endpoint.subscribe/1","type":"function","doc":"Subscribe the current process for messages about the given topic. Callback implementation for Absinthe.Subscription.Pubsub.subscribe/1."},{"ref":"GitGud.Web.Endpoint.html#subscribe/3","title":"GitGud.Web.Endpoint.subscribe/3","type":"function","doc":""},{"ref":"GitGud.Web.Endpoint.html#unsubscribe/1","title":"GitGud.Web.Endpoint.unsubscribe/1","type":"function","doc":"Unsubscribes the caller from the given topic. Callback implementation for Phoenix.Endpoint.unsubscribe/1."},{"ref":"GitGud.Web.Endpoint.html#url/0","title":"GitGud.Web.Endpoint.url/0","type":"function","doc":"Generates the endpoint base URL without any path information. It uses the configuration under :url to generate such."},{"ref":"GitGud.Web.ErrorHelpers.html","title":"GitGud.Web.ErrorHelpers","type":"module","doc":"Conveniences for translating and building error messages."},{"ref":"GitGud.Web.ErrorHelpers.html#error_tag/2","title":"GitGud.Web.ErrorHelpers.error_tag/2","type":"function","doc":"Generates tag for inlined form input errors."},{"ref":"GitGud.Web.ErrorHelpers.html#translate_error/1","title":"GitGud.Web.ErrorHelpers.translate_error/1","type":"function","doc":"Translates an error message using gettext."},{"ref":"GitGud.Web.ErrorView.html","title":"GitGud.Web.ErrorView","type":"module","doc":"Module providing error views for most common errors."},{"ref":"GitGud.Web.ErrorView.html#__phoenix_recompile__?/0","title":"GitGud.Web.ErrorView.__phoenix_recompile__?/0","type":"function","doc":"Returns true whenever the list of templates changes in the filesystem."},{"ref":"GitGud.Web.ErrorView.html#__resource__/0","title":"GitGud.Web.ErrorView.__resource__/0","type":"function","doc":"The resource name, as an atom, for this view"},{"ref":"GitGud.Web.ErrorView.html#__templates__/0","title":"GitGud.Web.ErrorView.__templates__/0","type":"function","doc":"Returns the template root alongside all templates."},{"ref":"GitGud.Web.ErrorView.html#render/2","title":"GitGud.Web.ErrorView.render/2","type":"function","doc":"Renders the given template locally."},{"ref":"GitGud.Web.ErrorView.html#template_not_found/2","title":"GitGud.Web.ErrorView.template_not_found/2","type":"function","doc":"Callback invoked when no template is found. By default it raises but can be customized to render a particular template."},{"ref":"GitGud.Web.FallbackController.html","title":"GitGud.Web.FallbackController","type":"module","doc":"Translates controller action results into valid Plug.Conn responses. See Phoenix.Controller.action_fallback/1 for more details."},{"ref":"GitGud.Web.FormHelpers.html","title":"GitGud.Web.FormHelpers","type":"module","doc":"Conveniences for custom HTML input validations. This module overloads input functions defined by Phoenix.HTML.Form by passing custom input_validations/2 to the HTML input target attributes."},{"ref":"GitGud.Web.FormHelpers.html#checkbox/3","title":"GitGud.Web.FormHelpers.checkbox/3","type":"function","doc":"See Phoenix.HTML.checkbox/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#date_input/3","title":"GitGud.Web.FormHelpers.date_input/3","type":"function","doc":"See Phoenix.HTML.date_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#date_select/3","title":"GitGud.Web.FormHelpers.date_select/3","type":"function","doc":"See Phoenix.HTML.date_select/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#datetime_local_input/3","title":"GitGud.Web.FormHelpers.datetime_local_input/3","type":"function","doc":"See Phoenix.HTML.datetime_local_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#datetime_select/3","title":"GitGud.Web.FormHelpers.datetime_select/3","type":"function","doc":"See Phoenix.HTML.datetime_select/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#email_input/3","title":"GitGud.Web.FormHelpers.email_input/3","type":"function","doc":"See Phoenix.HTML.email_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#file_input/3","title":"GitGud.Web.FormHelpers.file_input/3","type":"function","doc":"See Phoenix.HTML.file_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#hidden_input/3","title":"GitGud.Web.FormHelpers.hidden_input/3","type":"function","doc":"See Phoenix.HTML.hidden_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#input_validations/2","title":"GitGud.Web.FormHelpers.input_validations/2","type":"function","doc":"See Phoenix.HTML.input_validations/2 for more details."},{"ref":"GitGud.Web.FormHelpers.html#multiple_select/4","title":"GitGud.Web.FormHelpers.multiple_select/4","type":"function","doc":"See Phoenix.HTML.multiple_select/4 for more details."},{"ref":"GitGud.Web.FormHelpers.html#number_input/3","title":"GitGud.Web.FormHelpers.number_input/3","type":"function","doc":"See Phoenix.HTML.number_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#password_input/3","title":"GitGud.Web.FormHelpers.password_input/3","type":"function","doc":"See Phoenix.HTML.password_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#radio_button/4","title":"GitGud.Web.FormHelpers.radio_button/4","type":"function","doc":"See Phoenix.HTML.radio_button/4 for more details."},{"ref":"GitGud.Web.FormHelpers.html#range_input/3","title":"GitGud.Web.FormHelpers.range_input/3","type":"function","doc":"See Phoenix.HTML.range_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#search_input/3","title":"GitGud.Web.FormHelpers.search_input/3","type":"function","doc":"See Phoenix.HTML.search_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#select/4","title":"GitGud.Web.FormHelpers.select/4","type":"function","doc":"See Phoenix.HTML.select/4 for more details."},{"ref":"GitGud.Web.FormHelpers.html#telephone_input/3","title":"GitGud.Web.FormHelpers.telephone_input/3","type":"function","doc":"See Phoenix.HTML.telephone_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#text_input/3","title":"GitGud.Web.FormHelpers.text_input/3","type":"function","doc":"See Phoenix.HTML.text_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#textarea/3","title":"GitGud.Web.FormHelpers.textarea/3","type":"function","doc":"See Phoenix.HTML.textarea/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#time_input/3","title":"GitGud.Web.FormHelpers.time_input/3","type":"function","doc":"See Phoenix.HTML.time_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#time_select/3","title":"GitGud.Web.FormHelpers.time_select/3","type":"function","doc":"See Phoenix.HTML.time_select/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#url_input/3","title":"GitGud.Web.FormHelpers.url_input/3","type":"function","doc":"See Phoenix.HTML.url_input/3 for more details."},{"ref":"GitGud.Web.FormHelpers.html#user_input/3","title":"GitGud.Web.FormHelpers.user_input/3","type":"function","doc":"Generates an user input."},{"ref":"GitGud.Web.GPGKeyController.html","title":"GitGud.Web.GPGKeyController","type":"module","doc":"Module responsible for CRUD actions on GitGud.GPGKey."},{"ref":"GitGud.Web.GPGKeyController.html#create/2","title":"GitGud.Web.GPGKeyController.create/2","type":"function","doc":"Creates a new GPG key."},{"ref":"GitGud.Web.GPGKeyController.html#delete/2","title":"GitGud.Web.GPGKeyController.delete/2","type":"function","doc":"Deletes a GPG key."},{"ref":"GitGud.Web.GPGKeyController.html#index/2","title":"GitGud.Web.GPGKeyController.index/2","type":"function","doc":"Renders GPG keys."},{"ref":"GitGud.Web.GPGKeyController.html#new/2","title":"GitGud.Web.GPGKeyController.new/2","type":"function","doc":"Renders a creation form for GPG keys."},{"ref":"GitGud.Web.Gettext.html","title":"GitGud.Web.Gettext","type":"module","doc":"Module providing Internationalization with a gettext-based API. By using Gettext, your module gains a set of macros for translations, for example: import GitGud.Web.Gettext # Simple translation gettext &quot;Here is the string to translate&quot; # Plural translation ngettext &quot;Here is the string to translate&quot;, &quot;Here are the strings to translate&quot;, 3 # Domain-based translation dgettext &quot;errors&quot;, &quot;Here is the error message to translate&quot; See the Gettext Docs for detailed usage."},{"ref":"GitGud.Web.Gettext.html#dgettext/3","title":"GitGud.Web.Gettext.dgettext/3","type":"macro","doc":""},{"ref":"GitGud.Web.Gettext.html#dgettext_noop/2","title":"GitGud.Web.Gettext.dgettext_noop/2","type":"macro","doc":""},{"ref":"GitGud.Web.Gettext.html#dngettext/5","title":"GitGud.Web.Gettext.dngettext/5","type":"macro","doc":""},{"ref":"GitGud.Web.Gettext.html#dngettext_noop/3","title":"GitGud.Web.Gettext.dngettext_noop/3","type":"macro","doc":""},{"ref":"GitGud.Web.Gettext.html#gettext/2","title":"GitGud.Web.Gettext.gettext/2","type":"macro","doc":""},{"ref":"GitGud.Web.Gettext.html#gettext_comment/1","title":"GitGud.Web.Gettext.gettext_comment/1","type":"macro","doc":""},{"ref":"GitGud.Web.Gettext.html#gettext_noop/1","title":"GitGud.Web.Gettext.gettext_noop/1","type":"macro","doc":""},{"ref":"GitGud.Web.Gettext.html#handle_missing_bindings/2","title":"GitGud.Web.Gettext.handle_missing_bindings/2","type":"function","doc":"Default handling for missing bindings. This function is called when there are missing bindings in a translation. It takes a Gettext.MissingBindingsError struct and the translation with the wrong bindings left as is with the %{} syntax. For example, if something like this is called: MyApp.Gettext.gettext(&quot;Hello %{name}, welcome to %{country}&quot;, name: &quot;Jane&quot;, country: &quot;Italy&quot;) and our it/LC_MESSAGES/default.po looks like this: msgid &quot;Hello %{name}, welcome to %{country}&quot; msgstr &quot;Ciao %{name}, benvenuto in %{cowntry}&quot; # (typo) then Gettext will call: MyApp.Gettext.handle_missing_bindings(exception, &quot;Ciao Jane, benvenuto in %{cowntry}&quot;) where exception is a struct that looks like this: %Gettext.MissingBindingsError{ backend: MyApp.Gettext, domain: &quot;default&quot;, locale: &quot;it&quot;, msgid: &quot;Hello %{name}, welcome to %{country}&quot;, bindings: [:country], } The return value of the c:handle_missing_bindings/2 callback is used as the translated string that the translation macros and functions return. The default implementation for this function uses Logger.error/1 to warn about the missing binding and returns the translated message with the incomplete bindings. This function can be overridden. For example, to raise when there are missing bindings: def handle_missing_bindings(exception, _incomplete) do raise exception end Callback implementation for Gettext.Backend.handle_missing_bindings/2."},{"ref":"GitGud.Web.Gettext.html#handle_missing_plural_translation/6","title":"GitGud.Web.Gettext.handle_missing_plural_translation/6","type":"function","doc":"Default handling for plural translations with a missing translation. Same as c:handle_missing_translation/4, but for plural translations. In this case, n is the number used for pluralizing the translated string. Callback implementation for Gettext.Backend.handle_missing_plural_translation/6."},{"ref":"GitGud.Web.Gettext.html#handle_missing_translation/4","title":"GitGud.Web.Gettext.handle_missing_translation/4","type":"function","doc":"Default handling for translations with a missing translation. When a Gettext function/macro is called with a string to translate into a locale but that locale doesn&#39;t provide a translation for that string, this callback is invoked. msgid is the string that Gettext tried to translate. This function should return {:ok, translated} if a translation can be fetched or constructed for the given string, or {:default, msgid} otherwise. Callback implementation for Gettext.Backend.handle_missing_translation/4."},{"ref":"GitGud.Web.Gettext.html#lgettext/4","title":"GitGud.Web.Gettext.lgettext/4","type":"function","doc":""},{"ref":"GitGud.Web.Gettext.html#lngettext/6","title":"GitGud.Web.Gettext.lngettext/6","type":"function","doc":""},{"ref":"GitGud.Web.Gettext.html#ngettext/4","title":"GitGud.Web.Gettext.ngettext/4","type":"macro","doc":""},{"ref":"GitGud.Web.Gettext.html#ngettext_noop/2","title":"GitGud.Web.Gettext.ngettext_noop/2","type":"macro","doc":""},{"ref":"GitGud.Web.Gravatar.html","title":"GitGud.Web.Gravatar","type":"module","doc":"Conveniences for rendering Gravatars."},{"ref":"GitGud.Web.Gravatar.html#gravatar/2","title":"GitGud.Web.Gravatar.gravatar/2","type":"function","doc":"Renders a Gravatar widget for the given email."},{"ref":"GitGud.Web.IssueController.html","title":"GitGud.Web.IssueController","type":"module","doc":"Module responsible for CRUD actions on GitGud.Issue."},{"ref":"GitGud.Web.IssueController.html#create/2","title":"GitGud.Web.IssueController.create/2","type":"function","doc":"Creates a new repository."},{"ref":"GitGud.Web.IssueController.html#index/2","title":"GitGud.Web.IssueController.index/2","type":"function","doc":""},{"ref":"GitGud.Web.IssueController.html#new/2","title":"GitGud.Web.IssueController.new/2","type":"function","doc":"Renders a repository creation form."},{"ref":"GitGud.Web.IssueController.html#show/2","title":"GitGud.Web.IssueController.show/2","type":"function","doc":""},{"ref":"GitGud.Web.IssueLabelController.html","title":"GitGud.Web.IssueLabelController","type":"module","doc":"Module responsible for CRUD actions on GitGud.IssueLabel."},{"ref":"GitGud.Web.IssueLabelController.html#index/2","title":"GitGud.Web.IssueLabelController.index/2","type":"function","doc":"Renders issue labels."},{"ref":"GitGud.Web.IssueLabelController.html#update/2","title":"GitGud.Web.IssueLabelController.update/2","type":"function","doc":"Updates issue labels."},{"ref":"GitGud.Web.LandingPageController.html","title":"GitGud.Web.LandingPageController","type":"module","doc":"Module responsible for the landing page."},{"ref":"GitGud.Web.LandingPageController.html#index/2","title":"GitGud.Web.LandingPageController.index/2","type":"function","doc":""},{"ref":"GitGud.Web.MaintainerController.html","title":"GitGud.Web.MaintainerController","type":"module","doc":"Module responsible for CRUD actions on GitGud.Maintainer."},{"ref":"GitGud.Web.MaintainerController.html#create/2","title":"GitGud.Web.MaintainerController.create/2","type":"function","doc":"Creates a new maintainer."},{"ref":"GitGud.Web.MaintainerController.html#delete/2","title":"GitGud.Web.MaintainerController.delete/2","type":"function","doc":"Deletes a maintainer."},{"ref":"GitGud.Web.MaintainerController.html#index/2","title":"GitGud.Web.MaintainerController.index/2","type":"function","doc":"Renders maintainers."},{"ref":"GitGud.Web.MaintainerController.html#update/2","title":"GitGud.Web.MaintainerController.update/2","type":"function","doc":"Updates a maintainer&#39;s permissions."},{"ref":"GitGud.Web.Markdown.html","title":"GitGud.Web.Markdown","type":"module","doc":"Conveniences for rendering Markdown."},{"ref":"GitGud.Web.Markdown.html#markdown/2","title":"GitGud.Web.Markdown.markdown/2","type":"function","doc":"Renders a Markdown formatted content to HTML."},{"ref":"GitGud.Web.Markdown.html#markdown_safe/2","title":"GitGud.Web.Markdown.markdown_safe/2","type":"function","doc":"Renders a Markdown formatted content to HTML and marks it as safe for Phoenix to render."},{"ref":"GitGud.Web.NavigationHelpers.html","title":"GitGud.Web.NavigationHelpers","type":"module","doc":"Conveniences for routing and navigation."},{"ref":"GitGud.Web.NavigationHelpers.html#current_route/1","title":"GitGud.Web.NavigationHelpers.current_route/1","type":"function","doc":"Returns the conn controller and action as tuple."},{"ref":"GitGud.Web.NavigationHelpers.html#current_route?/3","title":"GitGud.Web.NavigationHelpers.current_route?/3","type":"function","doc":"Returns true if conn matches the given route helper; otherwhise return false."},{"ref":"GitGud.Web.NavigationHelpers.html#navigation_item/6","title":"GitGud.Web.NavigationHelpers.navigation_item/6","type":"function","doc":"Renders a navigation item for the given helper and action."},{"ref":"GitGud.Web.OAuth2Controller.html","title":"GitGud.Web.OAuth2Controller","type":"module","doc":"Module responsible for OAuth2.0 authentication."},{"ref":"GitGud.Web.OAuth2Controller.html#authorize/2","title":"GitGud.Web.OAuth2Controller.authorize/2","type":"function","doc":"Redirects to the providers authorize URL."},{"ref":"GitGud.Web.OAuth2Controller.html#callback/2","title":"GitGud.Web.OAuth2Controller.callback/2","type":"function","doc":"Authenticates user with OAuth2.0 access token."},{"ref":"GitGud.Web.OAuth2Controller.html#delete/2","title":"GitGud.Web.OAuth2Controller.delete/2","type":"function","doc":"Deletes an OAuth2.0 provider."},{"ref":"GitGud.Web.OAuth2Controller.html#index/2","title":"GitGud.Web.OAuth2Controller.index/2","type":"function","doc":"Renders OAuth2.0 providers."},{"ref":"GitGud.Web.PaginationHelpers.html","title":"GitGud.Web.PaginationHelpers","type":"module","doc":"Conveniences for list pagination."},{"ref":"GitGud.Web.PaginationHelpers.html#paginate/3","title":"GitGud.Web.PaginationHelpers.paginate/3","type":"function","doc":"Paginates the given stream."},{"ref":"GitGud.Web.PaginationHelpers.html#paginate_cursor/5","title":"GitGud.Web.PaginationHelpers.paginate_cursor/5","type":"function","doc":"Paginates the given stream."},{"ref":"GitGud.Web.PaginationHelpers.html#pagination/2","title":"GitGud.Web.PaginationHelpers.pagination/2","type":"function","doc":"Renders a pagination widget for the given page."},{"ref":"GitGud.Web.ReactComponents.html","title":"GitGud.Web.ReactComponents","type":"module","doc":"Functions to make rendering React components."},{"ref":"GitGud.Web.ReactComponents.html#react_component/1","title":"GitGud.Web.ReactComponents.react_component/1","type":"function","doc":"Generates a :div containing the named React component with no props or attrs. Returns safe html: {:safe, [60, &quot;div&quot;, ...]}. You can utilize this in your Phoenix views: &lt;%= GitGud.Web.React.react_component(&quot;MyComponent&quot;) %&gt; The resulting &lt;div&gt; tag is formatted specifically for the included javascript helper to then turn into your named React component."},{"ref":"GitGud.Web.ReactComponents.html#react_component/2","title":"GitGud.Web.ReactComponents.react_component/2","type":"function","doc":"Generates a :div containing the named React component with the given props. Returns safe html: {:safe, [60, &quot;div&quot;, ...]}. Props can be passed in as a Map or a List. You can utilize this in your Phoenix views: &lt;%= GitGud.Web.React.react_component(&quot;MyComponent&quot;, %{language: &quot;elixir&quot;, awesome: true}) %&gt; The resulting &lt;div&gt; tag is formatted specifically for the included javascript helper to then turn into your named React component and then pass in the props specified."},{"ref":"GitGud.Web.ReactComponents.html#react_component/3","title":"GitGud.Web.ReactComponents.react_component/3","type":"function","doc":"Generates a :div containing the named React component with the given props and attrs. Returns safe html: {:safe, [60, &quot;div&quot;, ...]}. You can utilize this in your Phoenix views: &lt;%= GitGud.Web.React.react_component( &quot;MyComponent&quot;, %{language: &quot;elixir&quot;, awesome: true}, class: &quot;my-component&quot; ) %&gt; The resulting &lt;div&gt; tag is formatted specifically for the included javascript helper to then turn into your named React component and then pass in the props specified."},{"ref":"GitGud.Web.ReactComponents.html#react_component/4","title":"GitGud.Web.ReactComponents.react_component/4","type":"function","doc":""},{"ref":"GitGud.Web.RepoController.html","title":"GitGud.Web.RepoController","type":"module","doc":"Module responsible for CRUD actions on GitGud.SSHKey."},{"ref":"GitGud.Web.RepoController.html#create/2","title":"GitGud.Web.RepoController.create/2","type":"function","doc":"Creates a new repository."},{"ref":"GitGud.Web.RepoController.html#delete/2","title":"GitGud.Web.RepoController.delete/2","type":"function","doc":"Updates a repository."},{"ref":"GitGud.Web.RepoController.html#edit/2","title":"GitGud.Web.RepoController.edit/2","type":"function","doc":"Renders a repository edit form."},{"ref":"GitGud.Web.RepoController.html#new/2","title":"GitGud.Web.RepoController.new/2","type":"function","doc":"Renders a repository creation form."},{"ref":"GitGud.Web.RepoController.html#update/2","title":"GitGud.Web.RepoController.update/2","type":"function","doc":"Updates a repository."},{"ref":"GitGud.Web.Router.Helpers.html","title":"GitGud.Web.Router.Helpers","type":"module","doc":"Module with named helpers generated from GitGud.Web.Router."},{"ref":"GitGud.Web.Router.Helpers.html#codebase_path/4","title":"GitGud.Web.Router.Helpers.codebase_path/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#codebase_path/5","title":"GitGud.Web.Router.Helpers.codebase_path/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#codebase_path/6","title":"GitGud.Web.Router.Helpers.codebase_path/6","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#codebase_path/7","title":"GitGud.Web.Router.Helpers.codebase_path/7","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#codebase_url/4","title":"GitGud.Web.Router.Helpers.codebase_url/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#codebase_url/5","title":"GitGud.Web.Router.Helpers.codebase_url/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#codebase_url/6","title":"GitGud.Web.Router.Helpers.codebase_url/6","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#codebase_url/7","title":"GitGud.Web.Router.Helpers.codebase_url/7","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#email_path/2","title":"GitGud.Web.Router.Helpers.email_path/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#email_path/3","title":"GitGud.Web.Router.Helpers.email_path/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#email_path/4","title":"GitGud.Web.Router.Helpers.email_path/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#email_url/2","title":"GitGud.Web.Router.Helpers.email_url/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#email_url/3","title":"GitGud.Web.Router.Helpers.email_url/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#email_url/4","title":"GitGud.Web.Router.Helpers.email_url/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#gpg_key_path/2","title":"GitGud.Web.Router.Helpers.gpg_key_path/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#gpg_key_path/3","title":"GitGud.Web.Router.Helpers.gpg_key_path/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#gpg_key_url/2","title":"GitGud.Web.Router.Helpers.gpg_key_url/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#gpg_key_url/3","title":"GitGud.Web.Router.Helpers.gpg_key_url/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_label_path/4","title":"GitGud.Web.Router.Helpers.issue_label_path/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_label_path/5","title":"GitGud.Web.Router.Helpers.issue_label_path/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_label_url/4","title":"GitGud.Web.Router.Helpers.issue_label_url/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_label_url/5","title":"GitGud.Web.Router.Helpers.issue_label_url/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_path/4","title":"GitGud.Web.Router.Helpers.issue_path/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_path/5","title":"GitGud.Web.Router.Helpers.issue_path/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_path/6","title":"GitGud.Web.Router.Helpers.issue_path/6","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_url/4","title":"GitGud.Web.Router.Helpers.issue_url/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_url/5","title":"GitGud.Web.Router.Helpers.issue_url/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#issue_url/6","title":"GitGud.Web.Router.Helpers.issue_url/6","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#landing_page_path/2","title":"GitGud.Web.Router.Helpers.landing_page_path/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#landing_page_path/3","title":"GitGud.Web.Router.Helpers.landing_page_path/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#landing_page_url/2","title":"GitGud.Web.Router.Helpers.landing_page_url/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#landing_page_url/3","title":"GitGud.Web.Router.Helpers.landing_page_url/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#maintainer_path/4","title":"GitGud.Web.Router.Helpers.maintainer_path/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#maintainer_path/5","title":"GitGud.Web.Router.Helpers.maintainer_path/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#maintainer_url/4","title":"GitGud.Web.Router.Helpers.maintainer_url/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#maintainer_url/5","title":"GitGud.Web.Router.Helpers.maintainer_url/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#oauth2_path/2","title":"GitGud.Web.Router.Helpers.oauth2_path/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#oauth2_path/3","title":"GitGud.Web.Router.Helpers.oauth2_path/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#oauth2_path/4","title":"GitGud.Web.Router.Helpers.oauth2_path/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#oauth2_url/2","title":"GitGud.Web.Router.Helpers.oauth2_url/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#oauth2_url/3","title":"GitGud.Web.Router.Helpers.oauth2_url/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#oauth2_url/4","title":"GitGud.Web.Router.Helpers.oauth2_url/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#path/2","title":"GitGud.Web.Router.Helpers.path/2","type":"function","doc":"Generates the path information including any necessary prefix."},{"ref":"GitGud.Web.Router.Helpers.html#repo_path/2","title":"GitGud.Web.Router.Helpers.repo_path/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#repo_path/3","title":"GitGud.Web.Router.Helpers.repo_path/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#repo_path/4","title":"GitGud.Web.Router.Helpers.repo_path/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#repo_path/5","title":"GitGud.Web.Router.Helpers.repo_path/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#repo_url/2","title":"GitGud.Web.Router.Helpers.repo_url/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#repo_url/3","title":"GitGud.Web.Router.Helpers.repo_url/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#repo_url/4","title":"GitGud.Web.Router.Helpers.repo_url/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#repo_url/5","title":"GitGud.Web.Router.Helpers.repo_url/5","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#session_path/2","title":"GitGud.Web.Router.Helpers.session_path/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#session_path/3","title":"GitGud.Web.Router.Helpers.session_path/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#session_url/2","title":"GitGud.Web.Router.Helpers.session_url/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#session_url/3","title":"GitGud.Web.Router.Helpers.session_url/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#ssh_key_path/2","title":"GitGud.Web.Router.Helpers.ssh_key_path/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#ssh_key_path/3","title":"GitGud.Web.Router.Helpers.ssh_key_path/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#ssh_key_url/2","title":"GitGud.Web.Router.Helpers.ssh_key_url/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#ssh_key_url/3","title":"GitGud.Web.Router.Helpers.ssh_key_url/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#static_integrity/2","title":"GitGud.Web.Router.Helpers.static_integrity/2","type":"function","doc":"Generates an integrity hash to a static asset given its file path."},{"ref":"GitGud.Web.Router.Helpers.html#static_path/2","title":"GitGud.Web.Router.Helpers.static_path/2","type":"function","doc":"Generates path to a static asset given its file path."},{"ref":"GitGud.Web.Router.Helpers.html#static_url/2","title":"GitGud.Web.Router.Helpers.static_url/2","type":"function","doc":"Generates url to a static asset given its file path."},{"ref":"GitGud.Web.Router.Helpers.html#url/1","title":"GitGud.Web.Router.Helpers.url/1","type":"function","doc":"Generates the connection/endpoint base URL without any path information."},{"ref":"GitGud.Web.Router.Helpers.html#user_path/2","title":"GitGud.Web.Router.Helpers.user_path/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#user_path/3","title":"GitGud.Web.Router.Helpers.user_path/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#user_path/4","title":"GitGud.Web.Router.Helpers.user_path/4","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#user_url/2","title":"GitGud.Web.Router.Helpers.user_url/2","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#user_url/3","title":"GitGud.Web.Router.Helpers.user_url/3","type":"function","doc":""},{"ref":"GitGud.Web.Router.Helpers.html#user_url/4","title":"GitGud.Web.Router.Helpers.user_url/4","type":"function","doc":""},{"ref":"GitGud.Web.SSHKeyController.html","title":"GitGud.Web.SSHKeyController","type":"module","doc":"Module responsible for CRUD actions on GitGud.SSHKey."},{"ref":"GitGud.Web.SSHKeyController.html#create/2","title":"GitGud.Web.SSHKeyController.create/2","type":"function","doc":"Creates a new SSH key."},{"ref":"GitGud.Web.SSHKeyController.html#delete/2","title":"GitGud.Web.SSHKeyController.delete/2","type":"function","doc":"Deletes a SSH key."},{"ref":"GitGud.Web.SSHKeyController.html#index/2","title":"GitGud.Web.SSHKeyController.index/2","type":"function","doc":"Renders SSH keys."},{"ref":"GitGud.Web.SSHKeyController.html#new/2","title":"GitGud.Web.SSHKeyController.new/2","type":"function","doc":"Renders a creation form for SSH keys."},{"ref":"GitGud.Web.SessionController.html","title":"GitGud.Web.SessionController","type":"module","doc":"Module responsible for user authentication."},{"ref":"GitGud.Web.SessionController.html#create/2","title":"GitGud.Web.SessionController.create/2","type":"function","doc":"Authenticates user with credentials."},{"ref":"GitGud.Web.SessionController.html#delete/2","title":"GitGud.Web.SessionController.delete/2","type":"function","doc":"Deletes user session."},{"ref":"GitGud.Web.SessionController.html#new/2","title":"GitGud.Web.SessionController.new/2","type":"function","doc":"Renders the login page."},{"ref":"GitGud.Web.UserController.html","title":"GitGud.Web.UserController","type":"module","doc":"Module responsible for CRUD actions on GitGud.User."},{"ref":"GitGud.Web.UserController.html#create/2","title":"GitGud.Web.UserController.create/2","type":"function","doc":"Creates a new user."},{"ref":"GitGud.Web.UserController.html#edit_password/2","title":"GitGud.Web.UserController.edit_password/2","type":"function","doc":"Renders a password edit form."},{"ref":"GitGud.Web.UserController.html#edit_profile/2","title":"GitGud.Web.UserController.edit_profile/2","type":"function","doc":"Renders a profile edit form."},{"ref":"GitGud.Web.UserController.html#new/2","title":"GitGud.Web.UserController.new/2","type":"function","doc":"Renders the registration page."},{"ref":"GitGud.Web.UserController.html#reset_password/2","title":"GitGud.Web.UserController.reset_password/2","type":"function","doc":"Renders a password reset form."},{"ref":"GitGud.Web.UserController.html#send_password_reset/2","title":"GitGud.Web.UserController.send_password_reset/2","type":"function","doc":"Sends a password reset email."},{"ref":"GitGud.Web.UserController.html#show/2","title":"GitGud.Web.UserController.show/2","type":"function","doc":"Renders a user."},{"ref":"GitGud.Web.UserController.html#update_password/2","title":"GitGud.Web.UserController.update_password/2","type":"function","doc":"Updates a password."},{"ref":"GitGud.Web.UserController.html#update_profile/2","title":"GitGud.Web.UserController.update_profile/2","type":"function","doc":"Updates a profile."},{"ref":"GitGud.Web.UserController.html#verify_password_reset/2","title":"GitGud.Web.UserController.verify_password_reset/2","type":"function","doc":"Resets a password using a bearer token."},{"ref":"GitGud.Web.UserSocket.html","title":"GitGud.Web.UserSocket","type":"module","doc":"Module providing support for bidirectional communication between clients and server."},{"ref":"GitGud.Web.UserSocket.html#connect/2","title":"GitGud.Web.UserSocket.connect/2","type":"function","doc":"Receives the socket params and authenticates the connection. Socket params and assigns Socket params are passed from the client and can be used to verify and authenticate a user. After verification, you can put default assigns into the socket that will be set for all channels, ie {:ok, assign(socket, :user_id, verified_user_id)} To deny connection, return :error. See Phoenix.Token documentation for examples in performing token verification on connect. Callback implementation for Phoenix.Socket.connect/2."},{"ref":"GitGud.Web.UserSocket.html#id/1","title":"GitGud.Web.UserSocket.id/1","type":"function","doc":"Identifies the socket connection. Socket IDs are topics that allow you to identify all sockets for a given user: def id(socket), do: &quot;users_socket:\#{socket.assigns.user_id}&quot; Would allow you to broadcast a &quot;disconnect&quot; event and terminate all active sockets and channels for a given user: MyApp.Endpoint.broadcast(&quot;users_socket:&quot; &lt;&gt; user.id, &quot;disconnect&quot;, %{}) Returning nil makes this socket anonymous. Callback implementation for Phoenix.Socket.id/1."},{"ref":"GitRekt.Git.html","title":"GitRekt.Git","type":"module","doc":"Erlang NIF that exposes a subset of libgit2&#39;s library functions. Most functions available in this module are implemented in C for performance reasons. These functions are compiled into a dynamic loadable, shared library. They are called like any other Elixir functions. As a NIF library is dynamically linked into the emulator process, this is the fastest way of calling C-code from Erlang (alongside port drivers). Calling NIFs requires no context switches. But it is also the least safe, because a crash in a NIF brings the emulator down too. Erlang documentation - NIFs Example Let&#39;s start with a basic code example showing the last commit author and message: alias GitRekt.Git # load repository {:ok, repo} = Git.repository_open(&quot;/tmp/my-repo&quot;) # fetch commit pointed by master {:ok, :commit, _oid, commit} = Git.reference_peel(repo, &quot;refs/heads/master&quot;) # fetch commit author &amp; message {:ok, name, email, time, _offset} = Git.commit_author(commit) {:ok, message} = Git.commit_message(commit) IO.puts &quot;Last commit by \#{name} &lt;\#{email}&gt;:&quot; IO.puts message First we open our repository using repository_open/1, passing the path of the Git repository. We can fetch a branch by passing the exact reference path to reference_peel/2. In our example, this allows us to retrieve the commit master is pointing to. This is one of many ways to fetch a given commit, reference_lookup/2 and reference_glob/2 offer similar functionalities. There are other related functions such as revparse_single/2 and revparse_ext/2 which provide support for parsing revspecs. Thread safety Accessing a repo/0 or any NIF allocated pointer (blob/0, commit/0, config/0, etc.) from multiple processes simultaneously is not safe. These pointers should never be shared across processes. In order to access a repository in a concurrent manner, each process has to initialize it&#39;s own repository pointer using repository_open/1. Alternatively, the GitRekt.GitAgent module provides a similar API but can use a dedicated process, so that its access can be serialized."},{"ref":"GitRekt.Git.html#blob_content/1","title":"GitRekt.Git.blob_content/1","type":"function","doc":"Returns the raw content of the given blob."},{"ref":"GitRekt.Git.html#blob_size/1","title":"GitRekt.Git.blob_size/1","type":"function","doc":"Returns the size in bytes of the given blob."},{"ref":"GitRekt.Git.html#commit_author/1","title":"GitRekt.Git.commit_author/1","type":"function","doc":"Returns the author of the given commit."},{"ref":"GitRekt.Git.html#commit_committer/1","title":"GitRekt.Git.commit_committer/1","type":"function","doc":"Returns the committer of the given commit."},{"ref":"GitRekt.Git.html#commit_create/8","title":"GitRekt.Git.commit_create/8","type":"function","doc":"Creates a new commit with the given params."},{"ref":"GitRekt.Git.html#commit_header/2","title":"GitRekt.Git.commit_header/2","type":"function","doc":"Returns an arbitrary header field of the given commit."},{"ref":"GitRekt.Git.html#commit_message/1","title":"GitRekt.Git.commit_message/1","type":"function","doc":"Returns the message for the given commit."},{"ref":"GitRekt.Git.html#commit_parent/2","title":"GitRekt.Git.commit_parent/2","type":"function","doc":"Looks for a parent commit of the given commit by its index."},{"ref":"GitRekt.Git.html#commit_parent_count/1","title":"GitRekt.Git.commit_parent_count/1","type":"function","doc":"Returns the number of parents for the given commit."},{"ref":"GitRekt.Git.html#commit_parents/1","title":"GitRekt.Git.commit_parents/1","type":"function","doc":"Returns parent commits of the given commit."},{"ref":"GitRekt.Git.html#commit_raw_header/1","title":"GitRekt.Git.commit_raw_header/1","type":"function","doc":"Returns the full raw header of the given commit."},{"ref":"GitRekt.Git.html#commit_time/1","title":"GitRekt.Git.commit_time/1","type":"function","doc":"Returns the time of the given commit."},{"ref":"GitRekt.Git.html#commit_tree/1","title":"GitRekt.Git.commit_tree/1","type":"function","doc":"Returns the tree for the given commit."},{"ref":"GitRekt.Git.html#commit_tree_id/1","title":"GitRekt.Git.commit_tree_id/1","type":"function","doc":"Returns the tree id for the given commit."},{"ref":"GitRekt.Git.html#config_get_bool/2","title":"GitRekt.Git.config_get_bool/2","type":"function","doc":"Returns the value of the config entry with the given name."},{"ref":"GitRekt.Git.html#config_get_string/2","title":"GitRekt.Git.config_get_string/2","type":"function","doc":"Returns the value of the config entry with the given name."},{"ref":"GitRekt.Git.html#config_open/1","title":"GitRekt.Git.config_open/1","type":"function","doc":"Returns a config handle for the given path."},{"ref":"GitRekt.Git.html#config_set_bool/3","title":"GitRekt.Git.config_set_bool/3","type":"function","doc":"Sets the config entry with the given name to val."},{"ref":"GitRekt.Git.html#config_set_string/3","title":"GitRekt.Git.config_set_string/3","type":"function","doc":"Sets the config entry with the given name to val."},{"ref":"GitRekt.Git.html#diff_delta_count/1","title":"GitRekt.Git.diff_delta_count/1","type":"function","doc":"Returns the number of deltas in the given diff."},{"ref":"GitRekt.Git.html#diff_deltas/1","title":"GitRekt.Git.diff_deltas/1","type":"function","doc":"Returns a list of deltas for the given diff."},{"ref":"GitRekt.Git.html#diff_format/2","title":"GitRekt.Git.diff_format/2","type":"function","doc":"Returns a binary represention of the given diff."},{"ref":"GitRekt.Git.html#diff_stats/1","title":"GitRekt.Git.diff_stats/1","type":"function","doc":"Returns stats for the given diff."},{"ref":"GitRekt.Git.html#diff_tree/4","title":"GitRekt.Git.diff_tree/4","type":"function","doc":"Returns a diff with the difference between two tree objects."},{"ref":"GitRekt.Git.html#index_add/2","title":"GitRekt.Git.index_add/2","type":"function","doc":"Adds or updates the given entry."},{"ref":"GitRekt.Git.html#index_bypath/3","title":"GitRekt.Git.index_bypath/3","type":"function","doc":"Retrieves an entry contained in the index given its relative path."},{"ref":"GitRekt.Git.html#index_clear/1","title":"GitRekt.Git.index_clear/1","type":"function","doc":"Clears the contents (all the entries) of the given index."},{"ref":"GitRekt.Git.html#index_count/1","title":"GitRekt.Git.index_count/1","type":"function","doc":"Returns the number of entries in the given index."},{"ref":"GitRekt.Git.html#index_new/0","title":"GitRekt.Git.index_new/0","type":"function","doc":"Creates an new in-memory index object."},{"ref":"GitRekt.Git.html#index_nth/2","title":"GitRekt.Git.index_nth/2","type":"function","doc":"Looks for an entry by its position in the given index."},{"ref":"GitRekt.Git.html#index_read_tree/2","title":"GitRekt.Git.index_read_tree/2","type":"function","doc":"Reads the given tree into the given index file with stats."},{"ref":"GitRekt.Git.html#index_write/1","title":"GitRekt.Git.index_write/1","type":"function","doc":"Writes the given index from memory back to disk using an atomic file lock."},{"ref":"GitRekt.Git.html#index_write_tree/1","title":"GitRekt.Git.index_write_tree/1","type":"function","doc":"Writes the given index as a tree."},{"ref":"GitRekt.Git.html#index_write_tree/2","title":"GitRekt.Git.index_write_tree/2","type":"function","doc":"Writes the given index as a tree."},{"ref":"GitRekt.Git.html#library_version/0","title":"GitRekt.Git.library_version/0","type":"function","doc":"Returns the libgit2 library version."},{"ref":"GitRekt.Git.html#object_id/1","title":"GitRekt.Git.object_id/1","type":"function","doc":"Returns the OID for the given obj."},{"ref":"GitRekt.Git.html#object_lookup/2","title":"GitRekt.Git.object_lookup/2","type":"function","doc":"Looks for an object with the given oid."},{"ref":"GitRekt.Git.html#object_repository/1","title":"GitRekt.Git.object_repository/1","type":"function","doc":"Returns the repository that owns the given obj."},{"ref":"GitRekt.Git.html#object_zlib_inflate/1","title":"GitRekt.Git.object_zlib_inflate/1","type":"function","doc":"Inflates the given data with zlib."},{"ref":"GitRekt.Git.html#odb_object_exists?/2","title":"GitRekt.Git.odb_object_exists?/2","type":"function","doc":"Returns true if the given oid exists in odb; elsewhise returns false."},{"ref":"GitRekt.Git.html#odb_object_hash/2","title":"GitRekt.Git.odb_object_hash/2","type":"function","doc":"Returns the OID of an object type and raw data. The resulting SHA-1 OID will be the identifier for the data buffer as if the data buffer it were to written to the ODB."},{"ref":"GitRekt.Git.html#odb_read/2","title":"GitRekt.Git.odb_read/2","type":"function","doc":"Return the uncompressed, raw data of an ODB object."},{"ref":"GitRekt.Git.html#odb_write/3","title":"GitRekt.Git.odb_write/3","type":"function","doc":"Writes the given data into the odb."},{"ref":"GitRekt.Git.html#oid_fmt/1","title":"GitRekt.Git.oid_fmt/1","type":"function","doc":"Returns the SHA hash for the given oid."},{"ref":"GitRekt.Git.html#oid_fmt_short/1","title":"GitRekt.Git.oid_fmt_short/1","type":"function","doc":"Returns the abbreviated SHA hash for the given oid."},{"ref":"GitRekt.Git.html#oid_parse/1","title":"GitRekt.Git.oid_parse/1","type":"function","doc":"Returns the OID for the given SHA hash."},{"ref":"GitRekt.Git.html#pack_data/1","title":"GitRekt.Git.pack_data/1","type":"function","doc":"Returns a PACK file for the given pack."},{"ref":"GitRekt.Git.html#pack_insert_commit/2","title":"GitRekt.Git.pack_insert_commit/2","type":"function","doc":"Inserts commit as well as the completed referenced tree."},{"ref":"GitRekt.Git.html#pack_insert_walk/2","title":"GitRekt.Git.pack_insert_walk/2","type":"function","doc":"Inserts objects as given by the walk."},{"ref":"GitRekt.Git.html#pack_new/1","title":"GitRekt.Git.pack_new/1","type":"function","doc":"Creates a new PACK object for the given repo."},{"ref":"GitRekt.Git.html#pathspec_match_tree/2","title":"GitRekt.Git.pathspec_match_tree/2","type":"function","doc":"Returns true if tree matches the given pathspec; otherwise returns false."},{"ref":"GitRekt.Git.html#reference_create/5","title":"GitRekt.Git.reference_create/5","type":"function","doc":"Creates a new reference name which points to an object or to an other reference."},{"ref":"GitRekt.Git.html#reference_delete/2","title":"GitRekt.Git.reference_delete/2","type":"function","doc":"Deletes an existing reference."},{"ref":"GitRekt.Git.html#reference_dwim/2","title":"GitRekt.Git.reference_dwim/2","type":"function","doc":"Looks for a reference by DWIMing its short_name."},{"ref":"GitRekt.Git.html#reference_glob/2","title":"GitRekt.Git.reference_glob/2","type":"function","doc":"Similar to reference_list/1 but allows glob patterns."},{"ref":"GitRekt.Git.html#reference_iterator/2","title":"GitRekt.Git.reference_iterator/2","type":"function","doc":"Returns an iterator for the references that match the specific glob pattern."},{"ref":"GitRekt.Git.html#reference_list/1","title":"GitRekt.Git.reference_list/1","type":"function","doc":"Returns all references for the given repo."},{"ref":"GitRekt.Git.html#reference_log?/2","title":"GitRekt.Git.reference_log?/2","type":"function","doc":"Returns true if a reflog exists for the given reference name."},{"ref":"GitRekt.Git.html#reference_lookup/2","title":"GitRekt.Git.reference_lookup/2","type":"function","doc":"Looks for a reference by name."},{"ref":"GitRekt.Git.html#reference_next/1","title":"GitRekt.Git.reference_next/1","type":"function","doc":"Returns the next reference."},{"ref":"GitRekt.Git.html#reference_peel/3","title":"GitRekt.Git.reference_peel/3","type":"function","doc":"Recursively peels the given reference name until an object of type type is found."},{"ref":"GitRekt.Git.html#reference_resolve/2","title":"GitRekt.Git.reference_resolve/2","type":"function","doc":"Resolves a symbolic reference to a direct reference."},{"ref":"GitRekt.Git.html#reference_stream/2","title":"GitRekt.Git.reference_stream/2","type":"function","doc":"Returns a stream for the references that match the specific glob pattern."},{"ref":"GitRekt.Git.html#reference_to_id/2","title":"GitRekt.Git.reference_to_id/2","type":"function","doc":"Looks for a reference by name and returns its id."},{"ref":"GitRekt.Git.html#reflog_count/2","title":"GitRekt.Git.reflog_count/2","type":"function","doc":"Reads the number of entry for the given reflog name."},{"ref":"GitRekt.Git.html#reflog_delete/2","title":"GitRekt.Git.reflog_delete/2","type":"function","doc":"Deletes the reflog for the given reference name."},{"ref":"GitRekt.Git.html#reflog_read/2","title":"GitRekt.Git.reflog_read/2","type":"function","doc":"Reads the reflog for the given reference name."},{"ref":"GitRekt.Git.html#repository_bare?/1","title":"GitRekt.Git.repository_bare?/1","type":"function","doc":"Returns true if repo is bare; elsewhise returns false."},{"ref":"GitRekt.Git.html#repository_discover/1","title":"GitRekt.Git.repository_discover/1","type":"function","doc":"Looks for a repository and returns its path."},{"ref":"GitRekt.Git.html#repository_empty?/1","title":"GitRekt.Git.repository_empty?/1","type":"function","doc":"Returns true if repo is empty; elsewhise returns false."},{"ref":"GitRekt.Git.html#repository_get_config/1","title":"GitRekt.Git.repository_get_config/1","type":"function","doc":"Returns the config for the given repo."},{"ref":"GitRekt.Git.html#repository_get_odb/1","title":"GitRekt.Git.repository_get_odb/1","type":"function","doc":"Returns the ODB for the given repository."},{"ref":"GitRekt.Git.html#repository_get_path/1","title":"GitRekt.Git.repository_get_path/1","type":"function","doc":"Returns the absolute path for the given repo."},{"ref":"GitRekt.Git.html#repository_get_workdir/1","title":"GitRekt.Git.repository_get_workdir/1","type":"function","doc":"Returns the normalized path to the working directory for the given repo."},{"ref":"GitRekt.Git.html#repository_init/2","title":"GitRekt.Git.repository_init/2","type":"function","doc":"Initializes a new repository at the given path."},{"ref":"GitRekt.Git.html#repository_load/1","title":"GitRekt.Git.repository_load/1","type":"function","doc":"Returns a repository handle for a custom backend."},{"ref":"GitRekt.Git.html#repository_open/1","title":"GitRekt.Git.repository_open/1","type":"function","doc":"Returns a repository handle for the path."},{"ref":"GitRekt.Git.html#revparse_ext/2","title":"GitRekt.Git.revparse_ext/2","type":"function","doc":"Finds a single object and intermediate reference, as specified by the given revision."},{"ref":"GitRekt.Git.html#revparse_single/2","title":"GitRekt.Git.revparse_single/2","type":"function","doc":"Finds a single object, as specified by the given revision."},{"ref":"GitRekt.Git.html#revwalk_new/1","title":"GitRekt.Git.revwalk_new/1","type":"function","doc":"Creates a new revision walk object for the given repo."},{"ref":"GitRekt.Git.html#revwalk_next/1","title":"GitRekt.Git.revwalk_next/1","type":"function","doc":"Returns the next commit from the given revision walk."},{"ref":"GitRekt.Git.html#revwalk_pack/1","title":"GitRekt.Git.revwalk_pack/1","type":"function","doc":"Returns a PACK file for the given walk."},{"ref":"GitRekt.Git.html#revwalk_push/3","title":"GitRekt.Git.revwalk_push/3","type":"function","doc":"Adds a new root for the traversal."},{"ref":"GitRekt.Git.html#revwalk_repository/1","title":"GitRekt.Git.revwalk_repository/1","type":"function","doc":"Returns the repository on which the given walker is operating."},{"ref":"GitRekt.Git.html#revwalk_reset/1","title":"GitRekt.Git.revwalk_reset/1","type":"function","doc":"Resets the revision walk for reuse."},{"ref":"GitRekt.Git.html#revwalk_simplify_first_parent/1","title":"GitRekt.Git.revwalk_simplify_first_parent/1","type":"function","doc":"Simplifies the history by first-parent."},{"ref":"GitRekt.Git.html#revwalk_sorting/2","title":"GitRekt.Git.revwalk_sorting/2","type":"function","doc":"Changes the sorting mode when iterating through the repository&#39;s contents."},{"ref":"GitRekt.Git.html#revwalk_stream/1","title":"GitRekt.Git.revwalk_stream/1","type":"function","doc":"Returns a stream for the given revision walk."},{"ref":"GitRekt.Git.html#signature_default/1","title":"GitRekt.Git.signature_default/1","type":"function","doc":"Returns the default signature for the given repo."},{"ref":"GitRekt.Git.html#signature_new/2","title":"GitRekt.Git.signature_new/2","type":"function","doc":"Creates a new signature with the given name and email."},{"ref":"GitRekt.Git.html#signature_new/3","title":"GitRekt.Git.signature_new/3","type":"function","doc":"Creates a new signature with the given name, email and time."},{"ref":"GitRekt.Git.html#tag_author/1","title":"GitRekt.Git.tag_author/1","type":"function","doc":"Returns the author of the given tag."},{"ref":"GitRekt.Git.html#tag_list/1","title":"GitRekt.Git.tag_list/1","type":"function","doc":"Returns all tags for the given repo."},{"ref":"GitRekt.Git.html#tag_message/1","title":"GitRekt.Git.tag_message/1","type":"function","doc":"Returns the message of the given tag."},{"ref":"GitRekt.Git.html#tag_name/1","title":"GitRekt.Git.tag_name/1","type":"function","doc":"Returns the name of the given tag."},{"ref":"GitRekt.Git.html#tag_peel/1","title":"GitRekt.Git.tag_peel/1","type":"function","doc":"Recursively peels the given tag until a non tag object is found."},{"ref":"GitRekt.Git.html#tree_byid/2","title":"GitRekt.Git.tree_byid/2","type":"function","doc":"Retrieves a tree entry owned by the given tree, given its id."},{"ref":"GitRekt.Git.html#tree_bypath/2","title":"GitRekt.Git.tree_bypath/2","type":"function","doc":"Retrieves a tree entry contained in the given tree or in any of its subtrees, given its relative path."},{"ref":"GitRekt.Git.html#tree_count/1","title":"GitRekt.Git.tree_count/1","type":"function","doc":"Returns the number of entries listed in the given tree."},{"ref":"GitRekt.Git.html#tree_entries/1","title":"GitRekt.Git.tree_entries/1","type":"function","doc":"Returns all entries in the given tree."},{"ref":"GitRekt.Git.html#tree_nth/2","title":"GitRekt.Git.tree_nth/2","type":"function","doc":"Looks for a tree entry by its position in the given tree."},{"ref":"GitRekt.Git.html#t:blob/0","title":"GitRekt.Git.blob/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:commit/0","title":"GitRekt.Git.commit/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:config/0","title":"GitRekt.Git.config/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:diff/0","title":"GitRekt.Git.diff/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:diff_delta/0","title":"GitRekt.Git.diff_delta/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:diff_file/0","title":"GitRekt.Git.diff_file/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:diff_format/0","title":"GitRekt.Git.diff_format/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:diff_hunk/0","title":"GitRekt.Git.diff_hunk/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:diff_line/0","title":"GitRekt.Git.diff_line/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:index/0","title":"GitRekt.Git.index/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:index_entry/0","title":"GitRekt.Git.index_entry/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:obj/0","title":"GitRekt.Git.obj/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:obj_type/0","title":"GitRekt.Git.obj_type/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:odb/0","title":"GitRekt.Git.odb/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:odb_type/0","title":"GitRekt.Git.odb_type/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:oid/0","title":"GitRekt.Git.oid/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:pack/0","title":"GitRekt.Git.pack/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:ref_iter/0","title":"GitRekt.Git.ref_iter/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:ref_type/0","title":"GitRekt.Git.ref_type/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:reflog_entry/0","title":"GitRekt.Git.reflog_entry/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:repo/0","title":"GitRekt.Git.repo/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:revwalk/0","title":"GitRekt.Git.revwalk/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:revwalk_sort/0","title":"GitRekt.Git.revwalk_sort/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:signature/0","title":"GitRekt.Git.signature/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:tag/0","title":"GitRekt.Git.tag/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:tree/0","title":"GitRekt.Git.tree/0","type":"type","doc":""},{"ref":"GitRekt.Git.html#t:tree_entry/0","title":"GitRekt.Git.tree_entry/0","type":"type","doc":""},{"ref":"GitRekt.GitAgent.html","title":"GitRekt.GitAgent","type":"module","doc":"High-level API for running Git commands on a repository. This module provides an API to manipulate Git repositories. In contrast to GitRekt.Git, it functions take and return structs such as GitRekt.GitRef, GitRekt.GitCommit, GitRekt.GitTree. Also, it allows multiple processes to manipulate a single repository simultaneously. Example Let&#39;s start by rewriting the example exposed in the GitRekt.Git module: alias GitRekt.Git alias GitRekt.GitAgent # load repository {:ok, repo} = Git.repository_open(&quot;/tmp/my-repo&quot;) # fetch master branch {:ok, branch} = GitAgent.branch(repo, &quot;master&quot;) # fetch commit pointed by master {:ok, commit} = GitAgent.peel(repo, branch) # fetch commit author &amp; message {:ok, author} = GitAgent.commit_author(repo, commit) {:ok, message} = GitAgent.commit_message(repo, commit) IO.puts &quot;Last commit by \#{author.name} &lt;\#{author.email}&gt;:&quot; IO.puts message So far, this look very similar to the original example. The real benefit of using GitRekt.GitAgent comes when multiple processes need to manipulate a single Git repository simultaneously. Let&#39;s refactor our code for that purpose: alias GitRekt.GitAgent # start a dedicated process for the repository {:ok, repo} = GitAgent.start_link(&quot;/tmp/my-repo&quot;) count_commits = fn revision -&gt; # fetch commit for given revision {:ok, commit, _ref} = GitAgent.revision(repo, revision) # walk history starting from commit {:ok, history} = GitAgent.history(repo, commit) # retrieve number of ancestors ancestor_cout = Enum.count(history) {revision, ancestor_count} end # simultaneously count the commit history from different revision points ~w(master my-feature-branch v0.2.8) |&gt; Enum.map(&amp;Task.async(fn -&gt; count_commits.(&amp;1) end)) |&gt; Enum.map(&amp;Task.await/1) |&gt; Enum.each(fn {revision, count} -&gt; IO.puts &quot;\#{revision} has \#{count} commits&quot; end) By swapping GitRekt.Git.repository_open/1 with start_link/1, we are not working with the underlying GitRekt.Git.repo/0 anymore. Instead we use a PID to serialize function calls via message passing. This allow use to access the repository from multiple processes. In our example we start an asynchronous task for counting the number of ancestor starting from each revision and collect the result afterwards. Note that in the above example history/2 returns a Stream.t/0 struct. We could use Stream.take/1 to retrieve the last 30 commits without having the Git agent process to enumerate the entire stream. Repository protocol It&#39;s also possible to implement the GitRekt.GitRepo protocol for your own data structure. For example, the GitGud.Repo schema implements this protocol and can be passed to GitRekt.GitAgent functions directly. See attach/2 for more details on how to attach a Git agent to a struct implementing GitRekt.GitRepo."},{"ref":"GitRekt.GitAgent.html#attach/2","title":"GitRekt.GitAgent.attach/2","type":"function","doc":"Attaches a Git agent to the given repo. Once attached, a repo can be used to interact directly with the underlying Git repository: {:ok, repo} = GitRekt.GitAgent.attach(repo) {:ok, head} = GitRekt.GitAgent.head(repo) IO.puts &quot;current branch: \#{head.name}&quot; Often times, it might be preferable to manipulate Git objects in a dedicated process. For example when you want to access a single repository from multiple processes simultaneously. For such cases, you can explicitly tell to load the agent in :shared mode."},{"ref":"GitRekt.GitAgent.html#attach!/2","title":"GitRekt.GitAgent.attach!/2","type":"function","doc":"Similar to attach/2, but raises an exception if an error occurs."},{"ref":"GitRekt.GitAgent.html#blob_content/2","title":"GitRekt.GitAgent.blob_content/2","type":"function","doc":"Returns the content of the given blob."},{"ref":"GitRekt.GitAgent.html#blob_size/2","title":"GitRekt.GitAgent.blob_size/2","type":"function","doc":"Returns the size in byte of the given blob."},{"ref":"GitRekt.GitAgent.html#branch/2","title":"GitRekt.GitAgent.branch/2","type":"function","doc":"Returns the Git branch with the given name."},{"ref":"GitRekt.GitAgent.html#branches/1","title":"GitRekt.GitAgent.branches/1","type":"function","doc":"Returns all Git branches."},{"ref":"GitRekt.GitAgent.html#child_spec/1","title":"GitRekt.GitAgent.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"GitRekt.GitAgent.html#commit_author/2","title":"GitRekt.GitAgent.commit_author/2","type":"function","doc":"Returns the author of the given commit."},{"ref":"GitRekt.GitAgent.html#commit_committer/2","title":"GitRekt.GitAgent.commit_committer/2","type":"function","doc":"Returns the committer of the given commit."},{"ref":"GitRekt.GitAgent.html#commit_gpg_signature/2","title":"GitRekt.GitAgent.commit_gpg_signature/2","type":"function","doc":"Returns the GPG signature of the given commit."},{"ref":"GitRekt.GitAgent.html#commit_message/2","title":"GitRekt.GitAgent.commit_message/2","type":"function","doc":"Returns the message of the given commit."},{"ref":"GitRekt.GitAgent.html#commit_parents/2","title":"GitRekt.GitAgent.commit_parents/2","type":"function","doc":"Returns the parent of the given commit."},{"ref":"GitRekt.GitAgent.html#commit_timestamp/2","title":"GitRekt.GitAgent.commit_timestamp/2","type":"function","doc":"Returns the timestamp of the given commit."},{"ref":"GitRekt.GitAgent.html#diff/4","title":"GitRekt.GitAgent.diff/4","type":"function","doc":"Returns the Git diff of obj1 and obj2."},{"ref":"GitRekt.GitAgent.html#diff_deltas/2","title":"GitRekt.GitAgent.diff_deltas/2","type":"function","doc":"Returns the deltas of the given diff."},{"ref":"GitRekt.GitAgent.html#diff_format/3","title":"GitRekt.GitAgent.diff_format/3","type":"function","doc":"Returns a binary formated representation of the given diff."},{"ref":"GitRekt.GitAgent.html#diff_stats/2","title":"GitRekt.GitAgent.diff_stats/2","type":"function","doc":"Returns the stats of the given diff."},{"ref":"GitRekt.GitAgent.html#empty?/1","title":"GitRekt.GitAgent.empty?/1","type":"function","doc":"Returns true if the repository is empty; otherwise returns false."},{"ref":"GitRekt.GitAgent.html#head/1","title":"GitRekt.GitAgent.head/1","type":"function","doc":"Returns the Git reference."},{"ref":"GitRekt.GitAgent.html#history/3","title":"GitRekt.GitAgent.history/3","type":"function","doc":"Returns the Git commit history of the given revision."},{"ref":"GitRekt.GitAgent.html#object/2","title":"GitRekt.GitAgent.object/2","type":"function","doc":"Returns the Git object with the given oid."},{"ref":"GitRekt.GitAgent.html#peel/3","title":"GitRekt.GitAgent.peel/3","type":"function","doc":"Peels the given obj until a Git object of the specified type is met."},{"ref":"GitRekt.GitAgent.html#reference/2","title":"GitRekt.GitAgent.reference/2","type":"function","doc":"Returns the Git reference with the given name."},{"ref":"GitRekt.GitAgent.html#references/2","title":"GitRekt.GitAgent.references/2","type":"function","doc":"Returns all Git references matching the given glob."},{"ref":"GitRekt.GitAgent.html#revision/2","title":"GitRekt.GitAgent.revision/2","type":"function","doc":"Returns the Git object matching the given spec."},{"ref":"GitRekt.GitAgent.html#start_link/2","title":"GitRekt.GitAgent.start_link/2","type":"function","doc":"Starts a Git agent linked to the current process for the repository at the given path."},{"ref":"GitRekt.GitAgent.html#tag/2","title":"GitRekt.GitAgent.tag/2","type":"function","doc":"Returns the Git tag with the given name."},{"ref":"GitRekt.GitAgent.html#tag_author/2","title":"GitRekt.GitAgent.tag_author/2","type":"function","doc":"Returns the Git tag author of the given tag."},{"ref":"GitRekt.GitAgent.html#tag_message/2","title":"GitRekt.GitAgent.tag_message/2","type":"function","doc":"Returns the Git tag message of the given tag."},{"ref":"GitRekt.GitAgent.html#tags/1","title":"GitRekt.GitAgent.tags/1","type":"function","doc":"Returns all Git tags."},{"ref":"GitRekt.GitAgent.html#tree/2","title":"GitRekt.GitAgent.tree/2","type":"function","doc":"Returns the Git tree of the given revision."},{"ref":"GitRekt.GitAgent.html#tree_entries/2","title":"GitRekt.GitAgent.tree_entries/2","type":"function","doc":"Returns the Git tree entries of the given tree."},{"ref":"GitRekt.GitAgent.html#tree_entries_by_path/4","title":"GitRekt.GitAgent.tree_entries_by_path/4","type":"function","doc":"Returns the Git tree entries for the given revision and path."},{"ref":"GitRekt.GitAgent.html#tree_entry_by_id/3","title":"GitRekt.GitAgent.tree_entry_by_id/3","type":"function","doc":"Returns the Git tree entry for the given revision and oid."},{"ref":"GitRekt.GitAgent.html#tree_entry_by_path/4","title":"GitRekt.GitAgent.tree_entry_by_path/4","type":"function","doc":"Returns the Git tree entry for the given revision and path."},{"ref":"GitRekt.GitAgent.html#tree_entry_target/2","title":"GitRekt.GitAgent.tree_entry_target/2","type":"function","doc":"Returns the Git tree target of the given tree_entry."},{"ref":"GitRekt.GitAgent.html#t:agent/0","title":"GitRekt.GitAgent.agent/0","type":"type","doc":""},{"ref":"GitRekt.GitAgent.html#t:git_object/0","title":"GitRekt.GitAgent.git_object/0","type":"type","doc":""},{"ref":"GitRekt.GitAgent.html#t:git_reference/0","title":"GitRekt.GitAgent.git_reference/0","type":"type","doc":""},{"ref":"GitRekt.GitAgent.html#t:git_revision/0","title":"GitRekt.GitAgent.git_revision/0","type":"type","doc":""},{"ref":"GitRekt.GitBlob.html","title":"GitRekt.GitBlob","type":"module","doc":"Represents a Git blob."},{"ref":"GitRekt.GitBlob.html#t:t/0","title":"GitRekt.GitBlob.t/0","type":"type","doc":""},{"ref":"GitRekt.GitCommit.html","title":"GitRekt.GitCommit","type":"module","doc":"Represents a Git commit."},{"ref":"GitRekt.GitCommit.html#t:t/0","title":"GitRekt.GitCommit.t/0","type":"type","doc":""},{"ref":"GitRekt.GitDiff.html","title":"GitRekt.GitDiff","type":"module","doc":"Represents a Git diff."},{"ref":"GitRekt.GitDiff.html#t:t/0","title":"GitRekt.GitDiff.t/0","type":"type","doc":""},{"ref":"GitRekt.GitRef.html","title":"GitRekt.GitRef","type":"module","doc":"Represents a Git reference."},{"ref":"GitRekt.GitRef.html#t:t/0","title":"GitRekt.GitRef.t/0","type":"type","doc":""},{"ref":"GitRekt.GitRepo.html","title":"GitRekt.GitRepo","type":"protocol","doc":"Protocol for implementing access to Git repositories."},{"ref":"GitRekt.GitRepo.html#get_agent/1","title":"GitRekt.GitRepo.get_agent/1","type":"function","doc":"Returns the agent for the given repo."},{"ref":"GitRekt.GitRepo.html#put_agent/2","title":"GitRekt.GitRepo.put_agent/2","type":"function","doc":"Puts the agent to the given repo."},{"ref":"GitRekt.GitRepo.html#t:t/0","title":"GitRekt.GitRepo.t/0","type":"type","doc":""},{"ref":"GitRekt.GitTag.html","title":"GitRekt.GitTag","type":"module","doc":"Represents a Git tag."},{"ref":"GitRekt.GitTag.html#t:t/0","title":"GitRekt.GitTag.t/0","type":"type","doc":""},{"ref":"GitRekt.GitTree.html","title":"GitRekt.GitTree","type":"module","doc":"Represents a Git tree."},{"ref":"GitRekt.GitTree.html#t:t/0","title":"GitRekt.GitTree.t/0","type":"type","doc":""},{"ref":"GitRekt.GitTreeEntry.html","title":"GitRekt.GitTreeEntry","type":"module","doc":"Represents a Git tree entry."},{"ref":"GitRekt.GitTreeEntry.html#t:t/0","title":"GitRekt.GitTreeEntry.t/0","type":"type","doc":""},{"ref":"GitRekt.Packfile.html","title":"GitRekt.Packfile","type":"module","doc":"Conveniences for reading and writting Git pack files."},{"ref":"GitRekt.Packfile.html#create/2","title":"GitRekt.Packfile.create/2","type":"function","doc":"Returns a PACK file for the given oids list."},{"ref":"GitRekt.Packfile.html#parse/1","title":"GitRekt.Packfile.parse/1","type":"function","doc":"Returns a list of ODB objects and their type for the given PACK data."},{"ref":"GitRekt.Packfile.html#parse/2","title":"GitRekt.Packfile.parse/2","type":"function","doc":"Same as parse/1 but starts from the given iterator."},{"ref":"GitRekt.Packfile.html#parse_header/1","title":"GitRekt.Packfile.parse_header/1","type":"function","doc":"Returns the PACK version and the number of objects it contains."},{"ref":"GitRekt.Packfile.html#t:obj/0","title":"GitRekt.Packfile.obj/0","type":"type","doc":""},{"ref":"GitRekt.Packfile.html#t:obj_iter/0","title":"GitRekt.Packfile.obj_iter/0","type":"type","doc":""},{"ref":"GitRekt.Packfile.html#t:obj_list/0","title":"GitRekt.Packfile.obj_list/0","type":"type","doc":""},{"ref":"GitRekt.WireProtocol.html","title":"GitRekt.WireProtocol","type":"behaviour","doc":"Conveniences for Git transport protocol and server side commands. This module implements version 2 of Git&#39;s wire protocol. It functions as a very basic finite-state machine by processing incoming client requests and forwarding them to the underlying service implementation (respectively receive-pack and upload-pack). The state machine is initialized by calling new/2 with the Git repository and command to execute. By passing incoming data to next/2, the underlying service transit to the next state. Once the client and the server are done with exchanging Git objects, the service will reach the :done state. When processing a entire (not chunked), one can use run/2 to execute all the steps in a single call."},{"ref":"GitRekt.WireProtocol.html#decode/1","title":"GitRekt.WireProtocol.decode/1","type":"function","doc":"Returns a stream of decoded PKT-LINEs for the given pkt."},{"ref":"GitRekt.WireProtocol.html#done?/1","title":"GitRekt.WireProtocol.done?/1","type":"function","doc":"Returns true if service is done; elsewhise returns false."},{"ref":"GitRekt.WireProtocol.html#encode/1","title":"GitRekt.WireProtocol.encode/1","type":"function","doc":"Returns an PKT-LINE encoded representation of the given lines."},{"ref":"GitRekt.WireProtocol.html#new/3","title":"GitRekt.WireProtocol.new/3","type":"function","doc":"Returns a new service object for the given repo and executable."},{"ref":"GitRekt.WireProtocol.html#next/2","title":"GitRekt.WireProtocol.next/2","type":"function","doc":"Runs the given service to the next step."},{"ref":"GitRekt.WireProtocol.html#c:next/2","title":"GitRekt.WireProtocol.next/2","type":"callback","doc":"Callback used to transist a service to the next step."},{"ref":"GitRekt.WireProtocol.html#pkt_line/1","title":"GitRekt.WireProtocol.pkt_line/1","type":"function","doc":"Returns the given data formatted as PKT-LINE"},{"ref":"GitRekt.WireProtocol.html#reference_discovery/2","title":"GitRekt.WireProtocol.reference_discovery/2","type":"function","doc":"Returns a stream describing each ref and it current value."},{"ref":"GitRekt.WireProtocol.html#run/3","title":"GitRekt.WireProtocol.run/3","type":"function","doc":"Runs all the steps of the given service at once."},{"ref":"GitRekt.WireProtocol.html#skip/1","title":"GitRekt.WireProtocol.skip/1","type":"function","doc":"Sets the given service to the next logical step without performing any action."},{"ref":"GitRekt.WireProtocol.html#c:skip/1","title":"GitRekt.WireProtocol.skip/1","type":"callback","doc":"Callback used to transist a service to the next step without performing any action."},{"ref":"GitRekt.WireProtocol.ReceivePack.html","title":"GitRekt.WireProtocol.ReceivePack","type":"module","doc":"Module implementing the git-receive-pack command."},{"ref":"GitRekt.WireProtocol.ReceivePack.html#apply_cmds/1","title":"GitRekt.WireProtocol.ReceivePack.apply_cmds/1","type":"function","doc":"Applies the given receive_pack commands to the repository."},{"ref":"GitRekt.WireProtocol.ReceivePack.html#apply_pack/2","title":"GitRekt.WireProtocol.ReceivePack.apply_pack/2","type":"function","doc":"Applies the given receive_pack PACK to the repository."},{"ref":"GitRekt.WireProtocol.ReceivePack.html#resolve_delta_objects/2","title":"GitRekt.WireProtocol.ReceivePack.resolve_delta_objects/2","type":"function","doc":"Returns the Git objects and Git delta-references for the given objs and delta_refs."},{"ref":"GitRekt.WireProtocol.ReceivePack.html#resolve_pack/1","title":"GitRekt.WireProtocol.ReceivePack.resolve_pack/1","type":"function","doc":"Returns the Git objects and Git delta-references for the given receive_pack."},{"ref":"GitRekt.WireProtocol.ReceivePack.html#t:callback/0","title":"GitRekt.WireProtocol.ReceivePack.callback/0","type":"type","doc":""},{"ref":"GitRekt.WireProtocol.ReceivePack.html#t:cmd/0","title":"GitRekt.WireProtocol.ReceivePack.cmd/0","type":"type","doc":""},{"ref":"GitRekt.WireProtocol.ReceivePack.html#t:t/0","title":"GitRekt.WireProtocol.ReceivePack.t/0","type":"type","doc":""},{"ref":"GitRekt.WireProtocol.UploadPack.html","title":"GitRekt.WireProtocol.UploadPack","type":"module","doc":"Module implementing the git-upload-pack command."},{"ref":"GitRekt.WireProtocol.UploadPack.html#t:t/0","title":"GitRekt.WireProtocol.UploadPack.t/0","type":"type","doc":""},{"ref":"getting-started.html","title":"Getting Started","type":"extras","doc":"Getting Started This guide is an introduction to GitGud, a Git repository web service written in Elixir. GitGud is an umbrella application split into three main components: GitRekt - Low-level Git functionalities written in C available as NIFs (see GitRekt.Git). It also provides native support for Git transfer protocols and PACK format. GitGud - Defines database schemas such as GitGud.User and GitGud.Repo and provides building-blocks for authentication, authorization, Git SSH and HTTP transport protocols, etc. GitGud.Web - Web-frontend similar to the one offered by GitHub providing a user-friendly management tool for Git repositories. It also features a GraphQL API. In the following sections, we will provide an overview of those components and how they interact with each other. Feel free to access their respective module documentation for more specific examples, options and configuration."}]